[{"path":"https://rwparsons.github.io/predictNMB/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to predictNMB","title":"Contributing to predictNMB","text":"outlines propose change predictNMB.","code":""},{"path":"https://rwparsons.github.io/predictNMB/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"Contributing to predictNMB","text":"like see change predictNMB description doesn’t help, create issue contact (email DESCRIPTION).","code":""},{"path":"https://rwparsons.github.io/predictNMB/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to predictNMB","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://rwparsons.github.io/predictNMB/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to predictNMB","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://rwparsons.github.io/predictNMB/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to predictNMB","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"RWParsons/predictNMB\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://rwparsons.github.io/predictNMB/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to predictNMB","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":[]},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rwparsons.github.io/predictNMB/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rwparsons.github.io/predictNMB/articles/creating-nmb-functions.html","id":"nmb-functions","dir":"Articles","previous_headings":"","what":"NMB functions","title":"Creating NMB functions","text":"key aspect predictNMB ability evaluate simulated prediction models terms Net Monetary Benefit (NMB). , requires user create provide functions assign NMB values four possible classifications confusion matrix. functions create named vectors, vectors values provide NMB value possible outcome: TP: True Positives, correctly predicted events lead necessary treatment TN: True Negatives, correctly predicted non-events avoid unnecessary treatment FP: False Positives, incorrectly predicted positives lead unnecessary treatment FN: False Negatives, incorrectly predicted non-events lead lack necessary treatment vignette guide creating functions hand, well using helper function, get_nmb_sampler(). start key considerations user creating functions best reflect clinical context, finish using created functions do_nmb_sim().","code":""},{"path":"https://rwparsons.github.io/predictNMB/articles/creating-nmb-functions.html","id":"key-considerations","dir":"Articles","previous_headings":"NMB functions","what":"Key considerations","title":"Creating NMB functions","text":"functions created used two purposes, depending argument passed , within do_nmb_sim() screen_simulation_inputs(). arguments require functions : fx_nmb_training: ever used cost_minimising value_optimising cutpoint methods used. cutpoints aim maximise NMB, therefore requiring best estimates NMB values assigned classification. fx_nmb_evaluation: used evaluation methods. argument required run simulations predictNMB. function generates named vector used fx_nmb_evaluation argument re-evaluated every iteration simulation. words, sampling range plausible values simulation inputs. allows us incorporate uncertainty, since unlikely know costs outcomes exactly. incorporating uncertainty way, propagating uncertainty throughout whole model. good practice simulation modelling, simulation never able perfectly mirror reality finding best method. include uncertainty fx_nmb_evaluation, making assumption know input model exactly. Note use best estimates (without uncertainty) fx_nmb_training function. reflects fact cutpoints selected practice, usually stay fixed rather varying scenario. fixed value evaluating simulations , want every time measure potential benefit choosing another cutpoint. may indicate merits cost_minimising value_optimising cutpoints overestimated, discussed end explore do_nmb_sim(). mean NMB per patient evaluated end simulated iteration based inputs created (named vector ). information, see associated vignette using browseVignettes(package = \"predictNMB\")).","code":""},{"path":"https://rwparsons.github.io/predictNMB/articles/creating-nmb-functions.html","id":"making-functions-by-hand","dir":"Articles","previous_headings":"NMB functions","what":"Making functions by hand","title":"Creating NMB functions","text":"first section describes make functions described hand. users unfamiliar R functions, section may unintuitive, subsequent get_nmb_sampler() section may gentler introduction. section introduces flexibility user can express creating functions, may excessive many cases. following function applies exact estimates square confusion matrix: Note NMB values classification equal less zero. frame around adverse healthcare event, example inpatient falls, best case scenario avoiding fall without needing provide additional fall prevention care beyond usual patient care (TN = 0). outcomes negative falls impose additional burden. remaining outcomes can calculated know cost fall $4, cost intervention $1, intervention reduces falls rate 50%. possible classifications: \\(TP = -\\$1 - \\frac{\\$4}{2} = -\\$3\\) (receive intervention ($1) falls ($4) occur half rate (/2)) \\(FP = -\\$1\\) (receive intervention ($1) avoid cost fall) \\(TN = \\$0\\) (receive intervention avoid cost fall) \\(FN -\\$4\\) (intervention experience full cost fall ($4)) Users may provide function without arguments form flexible. allows user incorporate uncertainty model evaluation, may know inputs exactly. example, function , sampled distributions values, rather setting expected value outcome. Every time call function, get different values based chosen distributions - exception true negative (TN) fixed zero. sampling procedure important evaluation, often referred health economics Probabilistic Sensitivity Analysis (PSA). Another benefit allowing user define function structure can also allow low risk group, population whose risk estimates fall probability threshold, receive intervention rather nothing. can preferable one available intervention use, one costly (presumably effective) . example, patients hospital might medication management plan place reduce falls risk high risk group might also receive additional surveillance nurses. way, can assign high risk patients receive high cost highly effective intervention, low risk patients receive low cost less effective intervention. Extending foo2() create function , assign low cost intervention $0.5 reduction falls 30%. Now providing intervention associated cost low risk group, negative NMB assigned true negative (TN) groups. exchange, reduced costs false negatives (FNs), least patients now receiving intervention, albeit less effective one. ’s important note NMB values negative, doesn’t imply worse implementing prediction models treatments. simply trying pick least bad option. becomes apparent set reference strategy, discussed detail introductory detailed example vignettes.","code":"foo1 <- function() {   c(     \"TP\" = -3,     \"FP\" = -1,     \"TN\" = 0,     \"FN\" = -4   ) } foo1() #> TP FP TN FN  #> -3 -1  0 -4 foo2 <- function() {   intervention_cost <- rgamma(n = 1, shape = 1)   intervention_effectiveness <- rbeta(n = 1, shape1 = 10, shape2 = 10)   fall_cost <- rgamma(n = 1, shape = 4)    c(     \"TP\" = -intervention_cost - fall_cost * (1 - intervention_effectiveness),     \"FP\" = -intervention_cost,     \"TN\" = 0,     \"FN\" = -fall_cost   ) }  foo2() #>         TP         FP         TN         FN  #> -2.8275195 -0.6437886  0.0000000 -3.7064827 foo2() #>        TP        FP        TN        FN  #> -3.822031 -1.543309  0.000000 -6.090754 foo2() #>         TP         FP         TN         FN  #> -3.2930408 -0.8626513  0.0000000 -4.9328592 foo3 <- function() {   # intervention for high risk (hr) group   hr_intervention_cost <- rgamma(n = 1, shape = 1)   hr_intervention_effectiveness <- rbeta(n = 1, shape1 = 10, shape2 = 10)    # intervention for low risk (lr) group   lr_intervention_cost <- rgamma(n = 1, shape = 0.5 * 10, rate = 1 * 10)   lr_intervention_effectiveness <- rbeta(n = 1, shape1 = 10, shape2 = 30)     fall_cost <- rgamma(n = 1, shape = 4)    c(     \"TP\" = -hr_intervention_cost - fall_cost *        (1 - hr_intervention_effectiveness),     \"FP\" = -hr_intervention_cost,     \"TN\" = -lr_intervention_cost,     \"FN\" = -lr_intervention_cost - fall_cost *        (1 - lr_intervention_effectiveness)   ) }  foo3() #>         TP         FP         TN         FN  #> -2.9847909 -0.4566667 -0.7738135 -3.7587872 foo3() #>        TP        FP        TN        FN  #> -3.927159 -1.038679 -0.185642 -3.659046 foo3() #>          TP          FP          TN          FN  #> -2.38081224 -0.05289241 -0.48588284 -3.77452897"},{"path":"https://rwparsons.github.io/predictNMB/articles/creating-nmb-functions.html","id":"making-functions-using-get_nmb_sampler","dir":"Articles","previous_headings":"NMB functions","what":"Making functions using get_nmb_sampler()","title":"Creating NMB functions","text":"previous section demonstrates make functions hand general approach thinking intervention costs effects. approach used get_nmb_sampler() abstracts actual creation function away make things straight forward user. can easier apply simple cases, removes ability complex modelling. replicate created foo1(), pass costs separate arguments. function created, output get_nmb_sampler(). Recall: cost fall $4, cost intervention $1, intervention reduces rate falls 50%. arguments passed costs (outcome_cost high_risk_group_treatment_cost) treatment effect. high_risk_group_treatment_effect rate reduction event receiving treatment, case 50% reduction (0.5). First, write code making plots sampled NMB values given function: Now can incorporate uncertainty passing argument-less, blank functions (function()), followed sampler (e.g. rgamma), generate sampled values arguments. calling get_nmb_sampler(), specify values blank functions, evaluated every time returned function called. let us see uncertainty classification graphically.  can also create NMB function replicates prior scenario low-risk group given cheaper less effective intervention.  addition specifying cost outcome, can also incorporate health-related quality life form quality-adjusted life years (QALYs), willingness pay (WTP) QALYs. included inputs get_nmb_sampler() evaluate overall net monetary benefit using: outcome_cost: single value associated event wtp: willingness pay. wtp multiplied qalys_lost input evaluate NMB associated event. qalys_lost: quality-adjusted life-years lost due event. qalys_lost multiplied wtp input evaluate NMB associated event. must provide EITHER outcome_cost alone wtp qalys_lost. can also provide three , example, fixed costs associated event separate QALYs lost. example, following fall, every patient may X-ray, separate cost QALYs lost willingness pay QALYs due fall. Returning falls function, WTP $8 fall associated 0.5 QALY lost (average), equivalent fixed cost $4. included function separate arguments, can clearly represent input model provide realistic representations. can use generate estimates (uncertainty) QALYs lost due event evaluating WTP avoid event.","code":"library(predictNMB)  foo1_remake <-   get_nmb_sampler(     outcome_cost = 4,     high_risk_group_treatment_cost = 1,     high_risk_group_treatment_effect = 0.5   )  foo1_remake() #> TP FP TN FN  #> -3 -1  0 -4 foo1() #> TP FP TN FN  #> -3 -1  0 -4 library(tidyr) library(ggplot2) plot_nmb_dist <- function(f, n = 10000) {   data <- do.call(\"rbind\", lapply(1:n, function(x) f()))    data_long <- pivot_longer(     as.data.frame(data),     cols = everything(),     names_to = \"classification\",     values_to = \"NMB\"   )    ggplot(data_long, aes(NMB)) +     geom_histogram() +     facet_wrap(~classification) +     theme_bw() +     labs(y = \"\", x = \"Net Monetary Benefit ($)\") } foo2_remake <-   get_nmb_sampler(     # our blank function, followed by a sampler     outcome_cost = function() rgamma(n = 1, shape = 4),      high_risk_group_treatment_cost = function() rgamma(n = 1, shape = 1),     high_risk_group_treatment_effect = function() rbeta(n = 1,                                                          shape1 = 10,                                                          shape2 = 10)   )  plot_nmb_dist(foo2_remake) + ggtitle(\"foo2_remake()\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot_nmb_dist(foo2) + ggtitle(\"foo2()\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. foo3_remake <-   get_nmb_sampler(     outcome_cost = function() rgamma(n = 1, shape = 4),     high_risk_group_treatment_cost = function() rgamma(n = 1, shape = 1),     high_risk_group_treatment_effect = function() rbeta(n = 1,                                                          shape1 = 10,                                                          shape2 = 10),     low_risk_group_treatment_cost = function() rgamma(n = 1,                                                        shape = 0.5 * 10,                                                        rate = 1 * 10),     low_risk_group_treatment_effect = function() rbeta(n = 1,                                                         shape1 = 10,                                                         shape2 = 30)   )  plot_nmb_dist(foo3_remake) + ggtitle(\"foo3_remake()\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot_nmb_dist(foo3) + ggtitle(\"foo3()\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. foo4 <-   get_nmb_sampler(     wtp = 8,     qalys_lost = 0.5,     high_risk_group_treatment_cost = 1,     high_risk_group_treatment_effect = 0.5   )  foo4() #> TP FP TN FN  #> -3 -1  0 -4 foo1() #> TP FP TN FN  #> -3 -1  0 -4"},{"path":"https://rwparsons.github.io/predictNMB/articles/creating-nmb-functions.html","id":"passing-these-functions-to-do_nmb_sim","dir":"Articles","previous_headings":"NMB functions","what":"Passing these functions to do_nmb_sim()","title":"Creating NMB functions","text":"NMB functions passed do_nmb_sim() function via fx_nmb_training fx_nmb_evaluation arguments. former purely selecting cutpoint ’re using either 'cost_minimising' 'value_optimising' cutpoint methods. , use 'value_optimising' cutpoint method alongside Youden index treat /none strategy. first example, pass foo1 do_nmb_sim() function, function always provides values every simulation, know exact outcome possible prediction. mentioned , see vignettes information inputs do_nmb_sim() function.  mentioned previously, problem using foo1 fx_nmb_evaluation don’t really know sure effective intervention , burden event , much things cost. incorporate uncertainty evaluation function, evaluation function training function. use NMB function incorporates uncertainty selecting cutpoint fx_nmb_training, mean picked costs randomly used data select cutpoint. unlikely practice, use expected value (best estimates) determine cutpoints reality. get_nmb_sampler() also offers ability extract fixed (expected) values sampling distributions using column means fx_nmb_training. example, using foo2_remake(), use get_nmb_sampler() way include use_expected_values = TRUE returns function gives fixed values training: many cases (including one), give similar values using parameter estimates (.e. foo1()), always. values process stable using estimates.  changes results incorporate uncertainty. important simulation modelling accounts possible differences simulation reality. Using values literature likely reduce uncertainty somewhat, might desirable confident simulated model closely resembles scenario literature.","code":"simulation_res1 <- do_nmb_sim(   sample_size = 200, n_sims = 500, n_valid = 10000, sim_auc = 0.7,   event_rate = 0.1, fx_nmb_training = foo1, fx_nmb_evaluation = foo1,   cutpoint_methods = c(\"all\", \"none\", \"youden\", \"value_optimising\") )  autoplot(simulation_res1) + theme_sim() foo2_remake <-   get_nmb_sampler(     outcome_cost = function() rgamma(n = 1, shape = 4),     high_risk_group_treatment_cost = function() rgamma(n = 1, shape = 1),     high_risk_group_treatment_effect = function() rbeta(n = 1,                                                          shape1 = 10,                                                          shape2 = 10)   )  foo2_remake_training <-   get_nmb_sampler(     outcome_cost = function() rgamma(n = 1, shape = 4),     high_risk_group_treatment_cost = function() rgamma(n = 1, shape = 1),     high_risk_group_treatment_effect = function() rbeta(n = 1,                                                         shape1 = 10,                                                          shape2 = 10),     use_expected_values = TRUE   )  foo2_remake_training() #>         TP         FP         TN         FN  #> -2.9925019 -0.9945337  0.0000000 -3.9988894 foo2_remake_training() #>         TP         FP         TN         FN  #> -2.9925019 -0.9945337  0.0000000 -3.9988894 foo2_remake_training() #>         TP         FP         TN         FN  #> -2.9925019 -0.9945337  0.0000000 -3.9988894 simulation_res2 <- do_nmb_sim(   sample_size = 200, n_sims = 500, n_valid = 10000, sim_auc = 0.7,   event_rate = 0.1, fx_nmb_training = foo2_remake_training,    fx_nmb_evaluation = foo2_remake,   cutpoint_methods = c(\"all\", \"none\", \"youden\", \"value_optimising\") )  autoplot(simulation_res2) + theme_sim()"},{"path":"https://rwparsons.github.io/predictNMB/articles/detailed-example.html","id":"detailed-example","dir":"Articles","previous_headings":"","what":"Detailed example","title":"Detailed example: pressure injury model","text":"Economic analyses often combine information variety sources, including randomised controlled trials, costing studies, local data. advantage simulation can estimate utility proposed intervention prior implementation. example, simulate decision process analyst hospital high rate pressure injuries (bedsores), also known pressure ulcers. Pressure ulcers considered significant adverse events patients, often leading additional discomfort, prolonged length hospital stay, increased costs. hospital currently uses pressure ulcer prevention interventions routinely, analyst examining whether implement new clinical prediction model identify patients may benefit existing interventions provide decision support reduce non-beneficial care. Let’s begin generating realistic costs probabilities. Keep mind, trying avoid negative event, net monetary benefit every strategy scenario going negative. case, negative values represent costs, aim maximise values (reduce costs). also interested improving quality life, estimate quality-adjusted life years (QALYs), multiply willingness--pay threshold (WTP), add gain loss true positive false negative estimates signify impact patient. simplicity, let’s say ’re interested hospital costs. Model inputs: Mean incremental cost per pressure injury: $9,324 (SE 814), adapted study Australian public hospitals updated 2021 AUD (Nguyen, Chaboyer, Whitty 2015) Per-patient cost pressure ulcer prevention intervention (PUP): $161 (SE 49), taken 2017 study updated 2021 AUD (Whitty et al. 2017) Hazard ratio pressure ulcer intervention compared non-intervention: 0.58 (log hazard ratio SE 0.43) (Chaboyer et al. 2016) AUC: 0.82 (Cichosz et al. 2019) Hypothetical hospital pressure injury incidence/event rate: 0.1 (SE 0.02) inputs, can populate confusion matrix (2 \\(\\times\\) 2 table), helps us understand outcomes resulting correct incorrect predictions.","code":""},{"path":"https://rwparsons.github.io/predictNMB/articles/detailed-example.html","id":"model-inputs","dir":"Articles","previous_headings":"Detailed example","what":"Model inputs","title":"Detailed example: pressure injury model","text":"First, need define NMB function, provides data simulation. case, intervention associated hazard ratio 0.58 pressure ulcer intervention conditions compared standard care. can use probability-weighted cost saving successful prevention, $9324*(0.58) = improvement around $5048. including $161 intervention costs, net benefit around $4888 successfully prevented pressure ulcer. AUC 0.82, represents proportion random positive patients received higher probability injury random negative patients (vice versa). useful property AUC matter probability threshold use. case, AUC 0.82 means model assign higher probabilities pressure ulcer around 82% patients go develop ulcer compared patients don’t. first pass, want see current values affect estimated NMB model implementation. just use best guesses now, rigorous simulation, want use Monte Carlo methods sample input distributions.   first pass shows treating none likely undesirable option, outperformed every method. set treat none reference strategy, NMB $0. Treat looks like pretty good choice, consider making intervention standard practice. best option NMB perspective looks value optimising cost minimising method. first plot shows actually lower threshold Youden index equivalents, means can bit less strict deciding gets intervention. intervention might worth using even low risk patients. Results ROC-based methods like Youden index index union also quite uncertain, may want use input parameters. However, utility models threshold selection methods based ROC might improve get accurate, event rate increases; really want know robust results changes input parameters. purpose screen_simulation_inputs(). can simulate distribution cost inputs, can pass vector AUC incidence arguments understand impact findings. First, let’s specify sampler function confusion matrix. can replace inputs single samples distributions. Make sure use code within function generate samples resampled every simulation. propagates uncertainty distributions NMB values many simulations run. sampler function shows can expect significant variation, especially due probability intervention effective. ’s always possible intervention lead worse patient outcomes. case, true positives actually worse false negatives! also check whether changing inputs can lead different results. Perhaps authors clinical prediction model reported misleading AUC implement model turns lower, perhaps pressure ulcer rate wards actually quite different average incidence hospital. replacing sim_auc event_rate arguments vectors, can run simulations possible combination interested . snippet , compare treat strategy total disinvestment intervention (“none”) couple alternative, model-guided strategies, using “value_optimising” “youden” thresholds. can also parallel speed things . model accuracy increases event rate decreases, treatment decisions based model, like Youden index, begin look better. reasonable gains using prediction model, even though uncertainty. event rates 0.05, 0.10 0.15 corresponded different wards hospital, simulation represent estimated effectiveness different strategies setting. can also represent results visually.     nice thing cost-effectiveness function tends follow best threshold, regardless AUC event rate. case, tends dynamically follow best treatment decision moves across, value optimising strategy tends overlap best alternative plots. can also see Youden index begins look better higher accuracy higher incidence rates, predicting patients get pressure ulcer challenging. Ultimately given AUC event rate, prediction model might worth using. original study, Whitty colleagues found prevention program cost-effective; however, combining prediction model, worth implementing, especially wards event might rarer. (Whitty et al. 2017).","code":"fx_nmb <- function() {   cost_of_pi <- 9324   eff_pup <- 0.58   cost_pup <- 161   c(     # True positive = Correctly predicted event savings - intervention cost     \"TP\" = -cost_of_pi * eff_pup - cost_pup,           # False positive: Cost of (unnecessary) treatment from incorrectly      # predicted positive     \"FP\" = -cost_pup,           # True negative: No cost of treatment or event from correctly      # predicted negative     \"TN\" = 0,           # False negative: Full cost of event from incorrectly predicted negative     \"FN\" = -cost_of_pi    ) }  fx_nmb() #>       TP       FP       TN       FN  #> -5568.92  -161.00     0.00 -9324.00 nmb_simulation <- do_nmb_sim(   # Evaluating a theoretical cohort of 1,000 patients   sample_size = 1000,       # The larger the number of simulations, the longer it takes to run, but the    # more reliable the results   n_sims = 500,       # Number of times the NMB is evaluated under each cutpoint   n_valid = 10000,       # The AUC of our proposed model   sim_auc = 0.82,      # The incidence of pressure ulcers at our hypothetical hospital   event_rate = 0.1,       # As a first pass, we will just use our confusion matrix vector above for    # training and evaluation   fx_nmb_training = fx_nmb,    fx_nmb_evaluation = fx_nmb )  nmb_simulation #> predictNMB object #>  #> Training data sample size:  1000 #> Minimum number of events in training sample:  100 #> Evaluation data sample size:  10000 #> Number of simulations:  500 #> Simulated AUC:  0.82 #> Simulated event rate:  0.1  # Get the median incremental NMB for each threshold selection method summary(nmb_simulation)  #> # A tibble: 8 × 3 #>   method           median `95% CI`         #>   <chr>             <dbl> <chr>            #> 1 all               -701. -732.1 to -668.8 #> 2 cost minimising   -666. -697.4 to -631.4 #> 3 index of union    -693. -737.4 to -650.3 #> 4 none              -931. -984.7 to -875.5 #> 5 prod sens spec    -693. -739.3 to -650.1 #> 6 roc01             -692. -737.2 to -651.9 #> 7 value optimising  -668. -703.4 to -632.1 #> 8 youden            -694. -750.7 to -650.2  # Demonstrates the range of selected cutpoints under each method autoplot(nmb_simulation, what = \"cutpoints\") + theme_sim() # Compares the incremental benefit of each alternate strategy to our  # current practice (treat all) autoplot(nmb_simulation, what = \"inb\", inb_ref_col = \"all\") + theme_sim() fx_nmb_sampler <- function() {   cost_of_pi <- rnorm(n = 1, mean = 9234, sd = 814)   eff_pup <- exp(rnorm(n = 1, mean = log(0.58), sd = 0.43))   cost_pup <- rnorm(n = 1, mean = 161, sd = 49)   c(     \"TP\" = -cost_of_pi * eff_pup - cost_pup,     \"FP\" = -cost_pup,     \"TN\" = 0,     \"FN\" = -cost_of_pi   ) }  fx_nmb_sampler() #>           TP           FP           TN           FN  #>  -7877.64019    -57.32187      0.00000 -10118.46666 fx_nmb_sampler() #>         TP         FP         TN         FN  #> -4295.8710  -190.9282     0.0000 -9813.3382 fx_nmb_sampler() #>         TP         FP         TN         FN  #> -6739.7166  -120.2324     0.0000 -8821.2976 cl <- makeCluster(2) sim_pup_screen <- screen_simulation_inputs(   n_sims = 500,   n_valid = 10000,   sim_auc = seq(0.72, 0.92, 0.05),   event_rate = c(0.05, 0.1, 0.15),   cutpoint_methods = c(\"all\", \"none\", \"value_optimising\", \"youden\"),   fx_nmb_training = fx_nmb,   fx_nmb_evaluation = fx_nmb_sampler,   cl = cl ) stopCluster(cl)  summary(sim_pup_screen) #> # A tibble: 15 × 10 #>    sim_auc event_rate all_median all_9…¹ none_…² none_…³ value…⁴ value…⁵ youde…⁶ #>      <dbl>      <dbl>      <dbl> <chr>     <dbl> <chr>     <dbl> <chr>     <dbl> #>  1    0.72       0.05      -428. -746 t…   -464. -551.1…   -393. -627.6…   -395. #>  2    0.72       0.1       -701. -1495.…   -924. -1096.…   -704. -1403.…   -763. #>  3    0.72       0.15      -979. -2051.…  -1390. -1637.…   -983. -2020.…  -1099. #>  4    0.77       0.05      -443. -786.8…   -465. -560.8…   -391. -644.8…   -394. #>  5    0.77       0.1       -686. -1441.…   -925. -1097.…   -678. -1336.…   -724. #>  6    0.77       0.15      -938. -1956.…  -1369. -1634.…   -943. -1912.…  -1041. #>  7    0.82       0.05      -422. -790.2…   -463. -542.3…   -366. -636.8…   -366. #>  8    0.82       0.1       -705. -1457.…   -922. -1106.…   -680. -1293.…   -701. #>  9    0.82       0.15      -973. -2015 …  -1380. -1653.…   -950. -1952.…  -1026. #> 10    0.87       0.05      -454. -811.8…   -460. -542.3…   -373. -684.7…   -376. #> 11    0.87       0.1       -718. -1444.…   -929. -1094.…   -677. -1284.…   -698  #> 12    0.87       0.15      -962. -2032.…  -1389. -1648.…   -936. -1894.…  -1001. #> 13    0.92       0.05      -428. -779 t…   -457. -548.2…   -347. -611.4…   -350. #> 14    0.92       0.1       -705. -1434.…   -923. -1086.…   -655. -1295.…   -661. #> 15    0.92       0.15      -942. -2251.…  -1383. -1629.…   -884. -2132.…   -933. #> # … with 1 more variable: `youden_95% CI` <chr>, and abbreviated variable names #> #   ¹​`all_95% CI`, ²​none_median, ³​`none_95% CI`, ⁴​`value optimising_median`, #> #   ⁵​`value optimising_95% CI`, ⁶​youden_median autoplot(   sim_pup_screen,    x_axis_var = \"sim_auc\",   constants = c(event_rate = 0.05),    dodge_width = 0.01 ) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.05 autoplot(   sim_pup_screen,    x_axis_var = \"sim_auc\",   constants = c(event_rate = 0.10),   dodge_width = 0.01 ) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.1 autoplot(   sim_pup_screen,    x_axis_var = \"sim_auc\",   constants = c(event_rate = 0.15),   dodge_width = 0.01 ) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.15 autoplot(   sim_pup_screen,    x_axis_var = \"event_rate\",    dodge_width = 0.0075 ) #>  #>  #> Varying simulation inputs, other than event_rate, are being held constant: #> sim_auc: 0.72"},{"path":[]},{"path":"https://rwparsons.github.io/predictNMB/articles/predictNMB.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"predictNMB","text":"predictNMB can used evaluate existing hypothetical clinical prediction models based Net Monetary Benefit (NMB). can relevant prognostic diagnostic models cutpoint (AKA, probability threshold) used generate predicted classes rather probabilities. often beneficial clinical settings present user predicted probability, may helpful simulate effect decision arising probability. example, hospital setting, user might want specify probability threshold clinical prediction model predicts inpatient falls best practice suggests providing fall-prevention intervention non-treatment default strategy. weighing NMB decisions, users can assess impact model suggested threshold prior implementation. predictNMB born related work investigates cutpoint selection methods maximise NMB, includes several options inbuilt user-specified cutpoint selection functions.","code":"library(predictNMB) library(parallel) set.seed(42)"},{"path":"https://rwparsons.github.io/predictNMB/articles/predictNMB.html","id":"whats-being-simulated","dir":"Articles","previous_headings":"Introduction","what":"What’s being simulated?","title":"predictNMB","text":"do_nmb_sim() run, many datasets created, models fit evaluated based NMB. evaluate NMB, user required specify functions define square confusion matrix, arises binary classification: TP: True Positives, correctly predicted events lead necessary treatment TN: True Negatives, correctly predicted non-events avoid unnecessary treatment FP: False Positives, incorrectly predicted positives lead unnecessary treatment FN: False Negatives, incorrectly predicted non-events lead lack necessary treatment presented function can repeatedly sample get uncertainty estimates. might want sample distribution uncertain parameters (example, TP FN) use constants parameters certain (, TN FP). function returns vector representing square matrix called.","code":""},{"path":"https://rwparsons.github.io/predictNMB/articles/predictNMB.html","id":"example-function","dir":"Articles","previous_headings":"Introduction > What’s being simulated?","what":"Example function","title":"predictNMB","text":"Every time run function, get new named vector NMB associated prediction. can inform distributions sample based literature specific clinical prediction model hand. See detailed example vignette -depth description using estimates literature. example function, value returned True Negative (TN) zero. may reflect scenario patients categorised low risk given treatment experience event predicted (e.g. fall) associated costs either. False Negative (FN) negative value; reflects worst possible outcome: patient experiences event intervention provided reduce rate effect associated costs. True Positive value similar FN, negative, patient received intervention reduced associated costs, possibly reducing rate event. two classifications uncertainty associated since costs associated outcome uncertain. unlike False Positive (FP), fixed cost $20. may realistic set costs providing intervention. example, intervention conduct falls education session patient, may exact, known cost. See detailed example vignette description example decide values use. Since expect use best estimates, case expected value NMB associated prediction actual model (take random sample underlying distributions), make separate function purpose obtaining cutpoint, separately one used () evaluate . inputs can passed screen_simulation_inputs() parameters fx_nmb_training fx_nmb_evaluation, evaluated simulation.","code":"get_nmb_sampler <- function() {   c(     \"TP\" = rnorm(n = 1, mean = -80, sd = 5),     \"TN\" = 0,     \"FP\" = -20,     \"FN\" = rnorm(n = 1, mean = -100, sd = 10)   ) }  get_nmb_sampler() #>         TP         TN         FP         FN  #>  -73.14521    0.00000  -20.00000 -105.64698 get_nmb_sampler() #>        TP        TN        FP        FN  #> -78.18436   0.00000 -20.00000 -93.67137 get_nmb_sampler() #>         TP         TN         FP         FN  #>  -77.97866    0.00000  -20.00000 -101.06125 get_nmb_sampler_training <- function() {   c(     \"TP\" = -80,     \"TN\" = 0,     \"FP\" = -20,     \"FN\" = -100   ) } get_nmb_sampler_training() #>   TP   TN   FP   FN  #>  -80    0  -20 -100"},{"path":"https://rwparsons.github.io/predictNMB/articles/predictNMB.html","id":"do_nmb_sim","dir":"Articles","previous_headings":"","what":"do_nmb_sim()","title":"predictNMB","text":"do_nmb_sim() single simulation set inputs hypothetical model NMB related functions. model, need know sample size training evaluation sets, model’s discrimination (Area Receiver Operating Characteristic Curve, also known Area Curve, AUC) event rate outcome predicted. create model, specified AUC transformed Cohen’s D value (Salgado 2018). single predictor variable negative events sampled standard normal distribution (mean = 0; standard deviation = 1) positive events sampled normal distribution mean equal calculated Cohen’s D value standard deviation 1. data used fit logistic regression model single predictor intercept term. Note may take time run simulation. (one may take minute, depending computer’s performance.) used show_progress = TRUE progress displayed default progress bar shown. can access simulation outputs like NMB cutpoints directly simulation object, choose strategies examine using list. useful examine histograms get summary values. example, current default strategy might treat , setting probability threshold treatment 0:  simulation various cutpoints can visualised using autoplot(). default visualise distributions NMB across (500) simulations. plot , spread (light blue) shows variability results due repeated simulation. median represented dark blue line center distribution. , use theme_sim() reduce clutter plots.  Treating looks like bad option . rest relatively similar AUC event rate, edge treat none models using either value optimisation cost minimisation cutpoint method. options include multiple cutpoint methods, default use available inbuilt methods well treat-treat-none strategies. can specify methods shown plots creating plot. (details plotting, see summarising results vignettes.)  can also use plotting function visualise cutpoints incremental net monetary benefit (INB) known reference strategy, case treat-:   Compared treat-, every alternative looks better, treating none using value-optimising/cost-minimising look best. can compare NMB cutpoint method, , accessing object directly: … selected cutpoints:","code":"nmb_simulation <- do_nmb_sim(   sample_size = 1000,   n_sims = 500,   n_valid = 10000,   sim_auc = 0.7,   event_rate = 0.1,   fx_nmb_training = get_nmb_sampler_training,   fx_nmb_evaluation = get_nmb_sampler,   show_progress = TRUE )  nmb_simulation #> predictNMB object #>  #> Training data sample size:  1000 #> Minimum number of events in training sample:  100 #> Evaluation data sample size:  10000 #> Number of simulations:  500 #> Simulated AUC:  0.7 #> Simulated event rate:  0.1 hist(   nmb_simulation$df_result$all,    main = \"Simulation results - treat all\",    xlab = \"Net monetary benefit (NMB)\" ) summary(nmb_simulation$df_result$all) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  -27.87  -26.39  -25.99  -26.02  -25.66  -24.41 autoplot(nmb_simulation) + theme_sim() get_inbuilt_cutpoint_methods() #> [1] \"all\"              \"none\"             \"value_optimising\" \"youden\"           #> [5] \"cost_minimising\"  \"prod_sens_spec\"   \"roc01\"            \"index_of_union\"  autoplot(nmb_simulation, methods = c(\"all\", \"none\", \"youden\")) + theme_sim() autoplot(nmb_simulation, what = \"cutpoints\") + theme_sim() autoplot(nmb_simulation, what = \"inb\", inb_ref_col = \"all\") + theme_sim() head(nmb_simulation$df_result) #>   n_sim       all       none value_optimising    youden cost_minimising #> 1     1 -25.08691  -9.791819        -9.791819 -14.56210       -9.790418 #> 2     2 -25.16047 -10.404846       -10.432962 -14.84745      -10.398127 #> 3     3 -25.37430  -7.751921        -7.863095 -11.30976       -7.760092 #> 4     4 -27.12287 -10.936631       -10.933125 -15.15321      -10.931125 #> 5     5 -26.13946  -9.476418        -9.475121 -15.19484       -9.476418 #> 6     6 -26.12984 -12.631143       -12.586456 -19.13756      -12.621600 #>   prod_sens_spec     roc01 index_of_union #> 1      -14.56210 -13.49478      -13.49478 #> 2      -14.84745 -14.84745      -14.84745 #> 3      -11.30976 -13.65652      -13.65652 #> 4      -15.15321 -15.15321      -15.15321 #> 5      -15.19484 -15.19484      -15.19484 #> 6      -16.29397 -16.29397      -16.13769 head(nmb_simulation$df_thresholds) #>   n_sim all none value_optimising     youden cost_minimising prod_sens_spec #> 1     1   0    1        1.0000000 0.09641938             0.5     0.09641938 #> 2     2   0    1        0.3627289 0.10026226             0.5     0.10026226 #> 3     3   0    1        0.3579602 0.13212194             0.5     0.13212194 #> 4     4   0    1        0.4854135 0.09627723             0.5     0.09627723 #> 5     5   0    1        0.3615890 0.11192980             0.5     0.11192980 #> 6     6   0    1        0.4265252 0.07235760             0.5     0.09989894 #>        roc01 index_of_union #> 1 0.11099649     0.11099649 #> 2 0.10026226     0.10026226 #> 3 0.09857486     0.09857486 #> 4 0.09627723     0.09627723 #> 5 0.11192980     0.11192980 #> 6 0.09989894     0.10231104"},{"path":"https://rwparsons.github.io/predictNMB/articles/predictNMB.html","id":"screen_simulation_inputs","dir":"Articles","previous_headings":"","what":"screen_simulation_inputs()","title":"predictNMB","text":"may want investigate relative improvement NMB increasing model performance (AUC) compare treat treat none strategy. following function assesses required performance model outperform default strategy treat treat none. example, cutpoints selected using Youden index cost-effectiveness approach, maximises NMB. , compare multiple simulations different inputs using screen_simulation_inputs(). function takes inputs do_nmb_sim() can take vector inputs rather single value. , pass vectors sim_auc event_rate. run simulations parallel creating cluster passing argument. can also done do_nmb_sim() way. can take time — fewer cores used, longer takes. details running parallel, see parallel package. hypothetical costed outcome, classification model cutpoint selected maximising Youden index, -performs treat-none strategy model AUC 0.9. quite high, may impossible outcome highly unpredictable. Also, event rate 0.1, rather 0.2, able match treat-none strategy model AUC 0.95.","code":"cl <- makeCluster(detectCores()) sim_screen_obj <- screen_simulation_inputs(   n_sims = 500,   n_valid = 10000,   sim_auc = seq(0.7, 0.95, 0.05),   event_rate = c(0.1, 0.2),   fx_nmb_training = get_nmb_sampler_training,   fx_nmb_evaluation = get_nmb_sampler,   cutpoint_methods = c(\"all\", \"none\", \"youden\", \"value_optimising\"),   cl = cl ) stopCluster(cl) autoplot(sim_screen_obj, x_axis_var = \"sim_auc\", constants = c(event_rate = 0.2)) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.2 autoplot(sim_screen_obj, x_axis_var = \"sim_auc\", constants = c(event_rate = 0.1)) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.1"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rwparsons.github.io/predictNMB/articles/summarising-results-with-predictNMB.html","id":"choosing-the-x-axis-variable-and-other-constants","dir":"Articles","previous_headings":"Making plots with predictNMB > Plotting the results from screen_simulation_inputs()","what":"Choosing the x-axis variable and other constants","title":"Summarising results from predictNMB","text":"simulation screen, vary event rate model discrimination (sim_AUC). many ways visualise data. autoplot() function allows us make basic plots compare impact different cutpoint methods Net Monetary Benefit (NMB) another variable choice. case, can visualise impact NMB different methods across varying levels sim_auc event_rate. control x_axis_var argument.  (avoid overlap points second plot, can specify dodge_width non-zero.)  plots, one screened inputs x-axis variable, displayed single level. default setting assume first level, visualise change NMB specifying sim_auc x-axis variable, observe case event_rate = 0.1. can choose select another level constants argument. argument expects named list containing values keep screened inputs shown x-axis.   see change plot well message produced plot made.","code":"autoplot(sim_screen_obj, x_axis_var = \"sim_auc\") #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.1 autoplot(sim_screen_obj, x_axis_var = \"event_rate\", dodge_width = 0.002) #>  #>  #> Varying simulation inputs, other than event_rate, are being held constant: #> sim_auc: 0.7 autoplot(sim_screen_obj, x_axis_var = \"sim_auc\", constants = list(event_rate = 0.1)) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.1 autoplot(sim_screen_obj, x_axis_var = \"sim_auc\", constants = list(event_rate = 0.2)) #>  #>  #> Varying simulation inputs, other than sim_auc, are being held constant: #> event_rate: 0.2"},{"path":"https://rwparsons.github.io/predictNMB/articles/summarising-results-with-predictNMB.html","id":"choosing-a-y-axis-variable","dir":"Articles","previous_headings":"Making plots with predictNMB > Plotting the results from screen_simulation_inputs()","what":"Choosing a y-axis variable","title":"Summarising results from predictNMB","text":"three options y-axis. default NMB, can also visualise Incremental Net Monetary Benefit (INB) selected cutpoints. controlled argument, can c(\"nmb\", \"inb\", \"cutpoints\"). vector used, first value selected. choose visualise INB, must list chosen reference strategy calculation inb_ref_col. case, use treat (\"\").","code":"autoplot(sim_screen_obj, what = \"nmb\") autoplot(sim_screen_obj, what = \"inb\", inb_ref_col = \"all\") autoplot(sim_screen_obj, what = \"cutpoints\")"},{"path":"https://rwparsons.github.io/predictNMB/articles/summarising-results-with-predictNMB.html","id":"selecting-what-to-show-on-the-plot","dir":"Articles","previous_headings":"Making plots with predictNMB > Plotting the results from screen_simulation_inputs()","what":"Selecting what to show on the plot","title":"Summarising results from predictNMB","text":"plots show median (dot), 95% confidence interval (thick vertical lines), range (thin vertical lines), lines points default. can shown hidden independently, width confidence interval can controlled using plot_conf_level argument.","code":"autoplot(sim_screen_obj) autoplot(sim_screen_obj, plot_range = FALSE) autoplot(sim_screen_obj, plot_conf_level = FALSE) autoplot(sim_screen_obj, plot_conf_level = FALSE, plot_range = FALSE) autoplot(sim_screen_obj, plot_conf_level = FALSE, plot_range = FALSE, plot_line = FALSE)"},{"path":"https://rwparsons.github.io/predictNMB/articles/summarising-results-with-predictNMB.html","id":"other-plot-modifications","dir":"Articles","previous_headings":"Making plots with predictNMB > Plotting the results from screen_simulation_inputs()","what":"Other plot modifications","title":"Summarising results from predictNMB","text":"Currently, lines dots overlap. can use dodge_width apply horizontal dodge layers.   cutpoint methods can renamed removed. rename , pass named vector rename_vector argument. names vector new names values names wish replace.   can reorder methods passing order methods_order argument. Also note remove methods aren’t included, factor names renamed . , renaming re-ordering, must provide updated names order :    transparency layers can controlled plot_alpha.","code":"autoplot(sim_screen_obj) autoplot(sim_screen_obj, dodge_width = 0.01) autoplot(sim_screen_obj) autoplot(   sim_screen_obj,   rename_vector = c(\"Treat All\" = \"all\",                      \"Treat None\" = \"none\",                     \"Youden Index\" = \"youden\",                      \"Value Optimisation\" = \"value_optimising\") ) autoplot(sim_screen_obj) autoplot(sim_screen_obj, methods_order = c(\"all\", \"none\")) autoplot(   sim_screen_obj,   # Assign new names to the two methods of interest   rename_vector = c(\"Treat All\" = \"all\", \"Treat None\" = \"none\"),       # Call the methods by their new names   methods_order = c(\"Treat All\", \"Treat None\")  ) autoplot(sim_screen_obj) autoplot(sim_screen_obj, plot_alpha = 0.2) autoplot(sim_screen_obj, plot_alpha = 1)"},{"path":"https://rwparsons.github.io/predictNMB/articles/summarising-results-with-predictNMB.html","id":"plotting-the-results-from-do_nmb_sim","dir":"Articles","previous_headings":"Making plots with predictNMB","what":"Plotting the results from do_nmb_sim()","title":"Summarising results from predictNMB","text":"Many arguments used can used object returned do_nmb_sim() plots show results single simulation compare available cutpoints.  y-axis variable names orders methods can controlled way previously:    plots display median solid bar, grey part distributions outer 5% simulated values light blue region 95% CI. methods select thresholds based values 2x2 table, including value-optimising thresholds, may look little strange cutpoints highly variable. can stabilised simulations. fill colours histogram controlled fill_cols line median controlled median_line_col. thickness median line controlled median_line_size transparency median_line_alpha.  n_bins argument controls number bins used histograms label_wrap_width number characters start new line facet labels. can handy using detailed names methods font label relatively large compared plot, though space needed determine split label. width confidence intervals can also controlled conf.level argument autoplot() call.","code":"do_nmb_sim_obj <- do_nmb_sim(   n_sims = 500,   n_valid = 10000,   sim_auc = 0.7,   event_rate = 0.1,   fx_nmb_training = get_nmb_sampler_training,   fx_nmb_evaluation = get_nmb_sampler_evaluation,   cutpoint_methods = c(\"all\", \"none\", \"youden\", \"value_optimising\") ) autoplot(do_nmb_sim_obj) + theme_sim() autoplot(do_nmb_sim_obj, what = \"nmb\") + theme_sim() autoplot(   do_nmb_sim_obj,   what = \"inb\",   inb_ref_col = \"all\",   rename_vector = c(     \"Value-Optimising\" = \"value_optimising\",     \"Treat-None\" = \"none\",     \"Youden Index\" = \"youden\"   ) ) + theme_sim() autoplot(   do_nmb_sim_obj,   what = \"cutpoints\",   methods_order = c(\"all\", \"none\", \"youden\", \"value optimising\") ) + theme_sim() autoplot(   do_nmb_sim_obj,   fill_cols = c(\"red\", \"blue\"),   median_line_col = \"yellow\",   median_line_alpha = 1,   median_line_size = 0.9 ) + theme_sim() autoplot(   do_nmb_sim_obj,   n_bins = 15,   rename_vector = c(     \"Value- Optimising\" = \"value_optimising\",     \"Treat- None\" = \"none\",     \"Treat- All\" = \"all\",     \"Youden Index\" = \"youden\"   ),   label_wrap_width = 5,   conf.level = 0.8 ) + theme_sim()"},{"path":"https://rwparsons.github.io/predictNMB/articles/summarising-results-with-predictNMB.html","id":"making-tables-with-predictnmb","dir":"Articles","previous_headings":"","what":"Making tables with predictNMB","title":"Summarising results from predictNMB","text":"make tables objects used plots, instead use summary(). can applied either type results (screen_simulation_inputs() do_nmb_sim()). Using %>% operator, can pass straight flextable() flextable package already loaded. sim_auc event_rate all_median all_95% CI none_median none_95% CI youden_median youden_95% CI value optimising_median value optimising_95% CI 0.70 0.1 -25.99 -26.3 -25.6 -9.98 -10.6 -9.4 -15.02 -20.3 -11.3 -10.05 -10.8 -9.4 0.70 0.2 -32.01 -32.5 -31.5 -20.01 -20.9 -19.2 -23.04 -26.6 -20.6 -20.07 -21.5 -19.2 0.75 0.1 -26.00 -26.3 -25.7 -10.00 -10.6 -9.5 -13.71 -18.5 -10.9 -10.04 -11 -9.5 0.75 0.2 -31.98 -32.4 -31.5 -19.97 -20.7 -19.2 -22.08 -25.3 -20.2 -19.93 -21.1 -19.1 0.80 0.1 -26.01 -26.4 -25.6 -10.02 -10.6 -9.4 -13.20 -17.9 -10.4 -10.02 -10.9 -9.4 0.80 0.2 -32.00 -32.5 -31.6 -20.00 -20.8 -19.3 -21.38 -24.2 -19.8 -19.67 -20.8 -18.9 0.85 0.1 -25.99 -26.4 -25.6 -9.99 -10.7 -9.4 -12.12 -16 -10 -9.89 -10.8 -9.3 0.85 0.2 -32.00 -32.4 -31.5 -20.00 -20.7 -19.2 -20.59 -22.6 -19.1 -19.25 -20.3 -18.5 0.90 0.1 -26.00 -26.4 -25.6 -10.00 -10.6 -9.4 -11.28 -14.6 -9.6 -9.68 -10.6 -9.1 0.90 0.2 -31.98 -32.5 -31.5 -19.97 -20.8 -19.1 -19.55 -21.7 -18.4 -18.71 -19.9 -17.9 0.95 0.1 -25.99 -26.3 -25.7 -9.99 -10.5 -9.4 -10.20 -12.7 -9 -9.28 -10 -8.7 0.95 0.2 -32.02 -32.5 -31.6 -20.03 -20.8 -19.2 -18.40 -19.8 -17.5 -17.95 -19.4 -17.2 method median 95% CI -25.99 -26.3 -25.6 none -9.98 -10.6 -9.4 value optimising -10.05 -10.8 -9.4 youden -15.02 -20.3 -11.3 default, methods aggregated median 95% confidence intervals (rounded 2 1 decimal places, respectively). default list functions passed summary() agg_functions argument. can changed functions aggregate numeric vector. method mean min max -25.99 -26.534 -25.406 none -9.98 -10.890 -9.010 value optimising -10.11 -25.880 -9.022 youden -15.14 -23.204 -10.086 rename_vector arguments work way using autoplot(). method median 95% CI Treat-None 16.01 15.8 16.2 Value-Optimising 15.96 15.3 16.2 Youden Index 10.99 5.8 14.7 sim_auc event_rate all_median all_95% CI none_median none_95% CI youden_median youden_95% CI value optimising_median value optimising_95% CI 0.70 0.1 -25.99 -26.3 -25.6 -9.98 -10.6 -9.4 -15.02 -20.3 -11.3 -10.05 -10.8 -9.4 0.70 0.2 -32.01 -32.5 -31.5 -20.01 -20.9 -19.2 -23.04 -26.6 -20.6 -20.07 -21.5 -19.2 0.75 0.1 -26.00 -26.3 -25.7 -10.00 -10.6 -9.5 -13.71 -18.5 -10.9 -10.04 -11 -9.5 0.75 0.2 -31.98 -32.4 -31.5 -19.97 -20.7 -19.2 -22.08 -25.3 -20.2 -19.93 -21.1 -19.1 0.80 0.1 -26.01 -26.4 -25.6 -10.02 -10.6 -9.4 -13.20 -17.9 -10.4 -10.02 -10.9 -9.4 0.80 0.2 -32.00 -32.5 -31.6 -20.00 -20.8 -19.3 -21.38 -24.2 -19.8 -19.67 -20.8 -18.9 0.85 0.1 -25.99 -26.4 -25.6 -9.99 -10.7 -9.4 -12.12 -16 -10 -9.89 -10.8 -9.3 0.85 0.2 -32.00 -32.4 -31.5 -20.00 -20.7 -19.2 -20.59 -22.6 -19.1 -19.25 -20.3 -18.5 0.90 0.1 -26.00 -26.4 -25.6 -10.00 -10.6 -9.4 -11.28 -14.6 -9.6 -9.68 -10.6 -9.1 0.90 0.2 -31.98 -32.5 -31.5 -19.97 -20.8 -19.1 -19.55 -21.7 -18.4 -18.71 -19.9 -17.9 0.95 0.1 -25.99 -26.3 -25.7 -9.99 -10.5 -9.4 -10.20 -12.7 -9 -9.28 -10 -8.7 0.95 0.2 -32.02 -32.5 -31.6 -20.03 -20.8 -19.2 -18.40 -19.8 -17.5 -17.95 -19.4 -17.2 summary table contains outputs do_nmb_sim() screen_simulation_inputs(), arranged slightly differently. row screen inputs object unique set inputs. default, trimmed include inputs vary function call — , sim_auc event_rate — using show_full_inputs argument. default, inputs vary shown. However, can set show_full_inputs = TRUE see . table , merge repeated values using merge_v() add theme_box() make bit easier read. (can see making tables flextable .) n_sims n_valid fx_nmb_training fx_nmb_evaluation sample_size sim_auc event_rate min_events meet_min_events .sim_id all_median all_95% CI none_median none_95% CI youden_median youden_95% CI value optimising_median value optimising_95% CI 500 10,000 unnamed-nmb-function-1 unnamed-nmb-function-1 189 0.70 0.1 19 TRUE 1 -25.99 -26.3 -25.6 -9.98 -10.6 -9.4 -15.02 -20.3 -11.3 -10.05 -10.8 -9.4 246 0.2 49 2 -32.01 -32.5 -31.5 -20.01 -20.9 -19.2 -23.04 -26.6 -20.6 -20.07 -21.5 -19.2 139 0.75 0.1 14 3 -26.00 -26.3 -25.7 -10.00 -10.6 -9.5 -13.71 -18.5 -10.9 -10.04 -11 -9.5 246 0.2 49 4 -31.98 -32.4 -31.5 -19.97 -20.7 -19.2 -22.08 -25.3 -20.2 -19.93 -21.1 -19.1 139 0.80 0.1 14 5 -26.01 -26.4 -25.6 -10.02 -10.6 -9.4 -13.20 -17.9 -10.4 -10.02 -10.9 -9.4 246 0.2 49 6 -32.00 -32.5 -31.6 -20.00 -20.8 -19.3 -21.38 -24.2 -19.8 -19.67 -20.8 -18.9 139 0.85 0.1 14 7 -25.99 -26.4 -25.6 -9.99 -10.7 -9.4 -12.12 -16 -10 -9.89 -10.8 -9.3 246 0.2 49 8 -32.00 -32.4 -31.5 -20.00 -20.7 -19.2 -20.59 -22.6 -19.1 -19.25 -20.3 -18.5 139 0.90 0.1 14 9 -26.00 -26.4 -25.6 -10.00 -10.6 -9.4 -11.28 -14.6 -9.6 -9.68 -10.6 -9.1 246 0.2 49 10 -31.98 -32.5 -31.5 -19.97 -20.8 -19.1 -19.55 -21.7 -18.4 -18.71 -19.9 -17.9 139 0.95 0.1 14 11 -25.99 -26.3 -25.7 -9.99 -10.5 -9.4 -10.20 -12.7 -9 -9.28 -10 -8.7 246 0.2 49 12 -32.02 -32.5 -31.6 -20.03 -20.8 -19.2 -18.40 -19.8 -17.5 -17.95 -19.4 -17.2","code":"summary(sim_screen_obj) summary(do_nmb_sim_obj) summary(   do_nmb_sim_obj,   agg_functions = list(     \"mean\" = function(x) round(mean(x), digits=2),     \"min\" = min,      \"max\" = max   ) ) summary(   do_nmb_sim_obj,   what = \"inb\",   inb_ref_col = \"all\",   rename_vector = c(     \"Value-Optimising\" = \"value_optimising\",     \"Treat-None\" = \"none\",     \"Youden Index\" = \"youden\"   ) ) summary(sim_screen_obj) summary(sim_screen_obj, show_full_inputs = TRUE)"},{"path":"https://rwparsons.github.io/predictNMB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rex Parsons. Author, maintainer. Robin Blythe. Author. Adrian Barnett. Author. Emi Tanaka. Reviewer.            Emi Tanaka reviewed predictNMB rOpenSci, see             <https://github.com/ropensci/software-review/issues/566>. Tinula Kariyawasam. Reviewer.            Tinula Kariyawasam reviewed predictNMB rOpenSci, see             <https://github.com/ropensci/software-review/issues/566>. Susanna Cramb. Contributor. Steven McPhail. Contributor.","code":""},{"path":"https://rwparsons.github.io/predictNMB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parsons R, Blythe R, Barnett (2022). predictNMB: Evaluate Clinical Prediction Models Net Monetary Benefit. 0.0.1, https://github.com/RWParsons/predictNMB.","code":"@Manual{,   title = {{predictNMB}: Evaluate Clinical Prediction Models by Net Monetary Benefit},   author = {Rex Parsons and Robin Blythe and Adrian Barnett},   year = {2022},   note = {0.0.1},   url = {https://github.com/RWParsons/predictNMB}, }"},{"path":[]},{"path":"https://rwparsons.github.io/predictNMB/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Evaluate Clinical Prediction Models by Net Monetary Benefit","text":"predictNMB tool evaluate (hypothetical) clinical prediction models based estimated Net Monetary Benefit (NMB). may used prediction model developers intend find performant model needs clinically useful health services deciding whether implement existing model. predictNMB two main functions: do_nmb_sim(): takes user defined inputs given prediction model population, evaluates NMB performing simulations. screen_simulation_inputs(): calls do_nmb_sim() many times, using range values inputs. useful sensitivity analysis.","code":""},{"path":"https://rwparsons.github.io/predictNMB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Evaluate Clinical Prediction Models by Net Monetary Benefit","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"RWParsons/predictNMB\")"},{"path":"https://rwparsons.github.io/predictNMB/index.html","id":"estimating-model-cutpoints","dir":"","previous_headings":"","what":"Estimating model cutpoints","title":"Evaluate Clinical Prediction Models by Net Monetary Benefit","text":"must first define hypothetical NMB associated square confusion matrix (2x2 table). , create R function , run, returns named vector representing four NMB values need. get_nmb_sampler() predictNMB function makes creating function easier! can pass simulation function. Required arguments: n_sims: number simulations run. simulations take longer, stable. event_rate: event incidence rate, proportion patients experiencing event. sim_auc: vector hypothetical AUCs; e.g. seq(0.7, 0.95, 0.05) c(0.75, 0.80, 0.85). n_valid: number samples validation set draws within simulation (evaluating NMB cutpoint). fx_nmb_training: function returns named vector used get cutpoints training set. Recommended use constant values. fx_nmb_evaluation: function returns named vector used get cutpoints evaluation set. Recommended use sampled values. cl: (Optional) users can pass cluster made using parallel::makeCluster(). given, simulations run parallel (faster). simulations can interpreted range hypothetical situations different levels model performance within specific healthcare setting. can visualise change may affect preferences model-guided strategy versus treat-treat-none strategy — words, using model determine get treatment, rather everyone -one. autoplot() can used object returned function quickly inspect trends:  , visualising many simulations different inputs. just want inspect single set inputs, say model AUC 0.9, can run simulation alone using do_nmb_sim(), access existing screen. plotting single set simulation inputs, see distributions NMB across simulations strategy. Note added tasteful themes using theme_sim() help reduce clutter types plots.","code":"library(predictNMB)  fx_nmb <- get_nmb_sampler(   outcome_cost = 100,   high_risk_group_treatment_effect = 0.35,   high_risk_group_treatment_cost = 10 )  fx_nmb() #>   TP   FP   TN   FN  #>  -75  -10    0 -100 library(parallel) cl <- makeCluster(detectCores()) sim_screen_obj <- screen_simulation_inputs(   n_sims = 1000, n_valid = 10000, sim_auc = seq(0.7, 0.95, 0.05), event_rate = 0.1,   fx_nmb_training = fx_nmb, fx_nmb_evaluation = fx_nmb,   cutpoint_methods = c(\"all\", \"none\", \"youden\"), cl = cl ) autoplot(sim_screen_obj) single_sim_obj <- do_nmb_sim(   n_sims = 1000, n_valid = 10000, sim_auc = 0.9, event_rate = 0.1,   fx_nmb_training = fx_nmb, fx_nmb_evaluation = fx_nmb,   cutpoint_methods = c(\"all\", \"none\", \"youden\"), cl = cl ) single_sim_obj <- sim_screen_obj$simulations[[6]] autoplot(single_sim_obj) + theme_sim()"},{"path":"https://rwparsons.github.io/predictNMB/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Evaluate Clinical Prediction Models by Net Monetary Benefit","text":"","code":"citation(\"predictNMB\") #>  #> To cite predictNMB in publications use: #>  #>   Parsons R, Blythe R, Barnett A (2022). _predictNMB: Evaluate Clinical #>   Prediction Models by Net Monetary Benefit_. 0.0.1, #>   <https://github.com/RWParsons/predictNMB>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {{predictNMB}: Evaluate Clinical Prediction Models by Net Monetary Benefit}, #>     author = {Rex Parsons and Robin Blythe and Adrian Barnett}, #>     year = {2022}, #>     note = {0.0.1}, #>     url = {https://github.com/RWParsons/predictNMB}, #>   }"},{"path":"https://rwparsons.github.io/predictNMB/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Evaluate Clinical Prediction Models by Net Monetary Benefit","text":"predictNMB website vignettes: Getting started predictNMB Summarising results predictNMB Detailed example: pressure injury model Creating NMB functions","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","title":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","text":"Create plots screened predictNMB simulations.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","text":"","code":"# S3 method for predictNMBscreen autoplot(   object,   x_axis_var = NULL,   constants = list(),   what = c(\"nmb\", \"inb\", \"cutpoints\"),   inb_ref_col = NA,   plot_range = TRUE,   plot_conf_level = TRUE,   plot_line = TRUE,   plot_alpha = 0.5,   dodge_width = 0,   conf.level = 0.95,   methods_order = NULL,   rename_vector,   ... )"},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","text":"object predictNMBscreen object. x_axis_var desired screened factor displayed along x axis. example, simulation screen used many values event rate, \"event_rate\". Defaults first detected, varied input. constants Named vector multiple inputs screened object, argument can used modify selected values except input varying along x-axis. See summarising methods vignette. summarise: one \"nmb\", \"inb\" \"cutpoints\". Defaults \"nmb\". inb_ref_col cutpoint method use reference strategy calculating incremental net monetary benefit. See do_nmb_sim information. plot_range logical. Whether plot range distribution thin line. Defaults TRUE. plot_conf_level logical. Whether plot confidence region distribution thicker line. Defaults TRUE. plot_line logical. Whether connect medians distributions method along x-axis. Defaults TRUE. plot_alpha Alpha value plot elements. Defaults 0.5. dodge_width dodge width plot elements. Can used avoid excessive overlap methods. Defaults 0. conf.level confidence level interval. Defaults 0.95 (coloured area distribution represents 95% CIs). methods_order order (left right) display cutpoint methods. rename_vector named vector renaming methods summary. values vector default names names given desired names output. ... Additional (unused) arguments.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","text":"Returns ggplot object.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBscreen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","text":"plot method works predictNMBscreen objects created using screen_simulation_inputs(). Can used visualise distributions many different simulations assign varying input x-axis plot.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create plots of from screened predictNMB simulations. — autoplot.predictNMBscreen","text":"","code":"if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_screen_obj <- screen_simulation_inputs(     n_sims = 50, n_valid = 10000, sim_auc = seq(0.7, 0.9, 0.1),     event_rate = c(0.1, 0.2, 0.3),     fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )    autoplot(sim_screen_obj)   autoplot(     sim_screen_obj,     x_axis_var = \"event_rate\",     constants = c(sim_auc = 0.8),     dodge_width = 0.02   ) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","title":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","text":"Create plots predictNMB simulations.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","text":"","code":"# S3 method for predictNMBsim autoplot(   object,   what = c(\"nmb\", \"inb\", \"cutpoints\"),   inb_ref_col = NA,   conf.level = 0.95,   methods_order = NULL,   n_bins = 40,   label_wrap_width = 12,   fill_cols = c(\"grey50\", \"#ADD8E6\"),   median_line_size = 2,   median_line_alpha = 0.5,   median_line_col = \"black\",   rename_vector,   ... )"},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","text":"object predictNMBsim object. summarise: one \"nmb\", \"inb\" \"cutpoints\". Defaults \"nmb\". inb_ref_col cutpoint method use reference strategy calculating incremental net monetary benefit. See do_nmb_sim information. conf.level confidence level interval. Defaults 0.95(coloured area distribution represents 95% CIs). methods_order order (left right) display cutpoint methods. n_bins number bins used constructing histograms. Defaults 40. label_wrap_width number characters facet labels label wrapped. Default 12. fill_cols Vector containing colours used fill aesthetic histograms. first colour represents area outside confidence region, second colour shows confidence region. Defaults c(\"grey50\", \"#ADD8E6\"). median_line_size Size line used represent median distribution. Defaults 2. median_line_alpha Alpha line used represent median distribution. Defaults 0.5. median_line_col Colour line used represent median distribution. Defaults \"black\". rename_vector named vector renaming methods summary. values vector default names names given desired names output. ... Additional (unused) arguments.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","text":"Returns ggplot object.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","text":"plot method works predictNMBsim objects created using do_nmb_sim(). Can used visualise distributions simulations different cutpoint methods.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/autoplot.predictNMBsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create plots of from predictNMB simulations. — autoplot.predictNMBsim","text":"","code":"if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_obj <- do_nmb_sim(     sample_size = 200, n_sims = 50, n_valid = 10000, sim_auc = 0.7,     event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )    autoplot(sim_obj) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/do_nmb_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","title":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","text":"predictNMB simulation, evaluating net monetary benefit simulated model.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/do_nmb_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","text":"","code":"do_nmb_sim(   sample_size,   n_sims,   n_valid,   sim_auc,   event_rate,   cutpoint_methods = get_inbuilt_cutpoint_methods(),   fx_nmb_training,   fx_nmb_evaluation,   meet_min_events = TRUE,   min_events = NA,   show_progress = FALSE,   cl = NULL )"},{"path":"https://rwparsons.github.io/predictNMB/reference/do_nmb_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","text":"sample_size Sample size training set. missing, sample size calculation performed calculated size used. n_sims Number simulations run. n_valid Sample size evaluation set. sim_auc Simulated model discrimination (AUC). event_rate Simulated event rate binary outcome predicted. Also known prevalence. cutpoint_methods value vector cutpoint methods include. Defaults use inbuilt methods: \"\" = treat patients (cutpoint = 0) \"none\" = treat patients (cutpoint = 1) \"value_optimising\" = select cutpoint maximises NMB \"youden\" = select cutpoint based Youden index, also known J-index (sensitivity + specificity - 1) \"cost_minimising\" = select cutpoint minimises expected value costs \"prod_sens_spec\" = product sensitivity specificity (sensitivity * specificity) \"roc01\" = selects closest threshold (0,1) point ROC curve User-defined cutpoint methods can used passing name function takes following arguments: predicted (predicted probabilities) actual (actual, binary outcome) nmb (named vector containing NMB values assigned predicted class (.e. c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4))) See ?get_thresholds example user-defined cutpoint function. fx_nmb_training Function returns named vector NMB assigned classifications used obtaining cutpoint training set. fx_nmb_evaluation Function returns named vector NMB assigned classifications used obtaining cutpoint evaluation set. meet_min_events Whether incrementally add samples expected number events (sample_size * event_rate) met. (Applies sampling training data .) min_events minimum number events include training sample. less number included sample size sample_size, additional samples added min_events met. default (NA) use expected value given event_rate sample_size. show_progress Logical. Whether display progress bar. cl cluster made using parallel::makeCluster(). cluster provided, simulation done parallel.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/do_nmb_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","text":"Returns predictNMBsim object.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/do_nmb_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","text":"function runs simulation given set inputs represent healthcare setting using model-guided interventions.  arguments fx_nmb_training fx_nmb_evaluation functions capture treatment used, costs effectiveness, costs outcome treated/prevented.  functions return named vector NMB values called used obtaining evaluating cutpoints, respectively. example, following function returns appropriately named vector. get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4) helper function, get_nmb_sampler(), help create .","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/do_nmb_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do the predictNMB simulation, evaluating the net monetary benefit of the\nsimulated model. — do_nmb_sim","text":"","code":"get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4) do_nmb_sim(   sample_size = 200, n_sims = 50, n_valid = 10000, sim_auc = 0.7,   event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb ) #> predictNMB object #>  #> Training data sample size:  200 #> Minimum number of events in training sample:  20 #> Evaluation data sample size:  10000 #> Number of simulations:  50 #> Simulated AUC:  0.7 #> Simulated event rate:  0.1"},{"path":"https://rwparsons.github.io/predictNMB/reference/evaluate_cutpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates a cutpoint by returning the mean NMB per sample. — evaluate_cutpoint","title":"Evaluates a cutpoint by returning the mean NMB per sample. — evaluate_cutpoint","text":"Evaluates cutpoint returning mean NMB per sample.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/evaluate_cutpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a cutpoint by returning the mean NMB per sample. — evaluate_cutpoint","text":"","code":"evaluate_cutpoint(predicted, actual, pt, nmb)"},{"path":"https://rwparsons.github.io/predictNMB/reference/evaluate_cutpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a cutpoint by returning the mean NMB per sample. — evaluate_cutpoint","text":"predicted vector predicted probabilities. actual vector actual outcomes. pt probability threshold evaluated. nmb named vector containing NMB assigned classification.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/evaluate_cutpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluates a cutpoint by returning the mean NMB per sample. — evaluate_cutpoint","text":"Returns numeric value representing NMB cutpoint data.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/evaluate_cutpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluates a cutpoint by returning the mean NMB per sample. — evaluate_cutpoint","text":"","code":"evaluate_cutpoint(   predicted = runif(1000),   actual = sample(c(0, 1), size = 1000, replace = TRUE),   pt = 0.1,   nmb = c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4) ) #> [1] -1.996"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a cutpoint using the methods inbuilt to predictNMB — get_inbuilt_cutpoint","title":"Get a cutpoint using the methods inbuilt to predictNMB — get_inbuilt_cutpoint","text":"Get cutpoint using methods inbuilt predictNMB","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a cutpoint using the methods inbuilt to predictNMB — get_inbuilt_cutpoint","text":"","code":"get_inbuilt_cutpoint(predicted, actual, nmb, method)"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a cutpoint using the methods inbuilt to predictNMB — get_inbuilt_cutpoint","text":"predicted vector predicted probabilities actual vector actual outcomes nmb named vector containing NMB assigned classification method cutpoint selection method used methods can used method argument","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a cutpoint using the methods inbuilt to predictNMB — get_inbuilt_cutpoint","text":"Returns selected cutpoint (numeric).","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a cutpoint using the methods inbuilt to predictNMB — get_inbuilt_cutpoint","text":"","code":"## get the list of available methods: get_inbuilt_cutpoint_methods() #> [1] \"all\"              \"none\"             \"value_optimising\" \"youden\"           #> [5] \"cost_minimising\"  \"prod_sens_spec\"   \"roc01\"            \"index_of_union\"    ## get the cutpoint that maximises the Youden index for a given set of ## probabilities and outcomes get_inbuilt_cutpoint(   predicted = runif(1000),   actual = sample(c(0, 1), size = 1000, replace = TRUE),   method = \"youden\" ) #> [1] 0.1007245"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all the inbuilt cutpoint methods — get_inbuilt_cutpoint_methods","title":"Get a vector of all the inbuilt cutpoint methods — get_inbuilt_cutpoint_methods","text":"Get vector inbuilt cutpoint methods","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all the inbuilt cutpoint methods — get_inbuilt_cutpoint_methods","text":"","code":"get_inbuilt_cutpoint_methods()"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all the inbuilt cutpoint methods — get_inbuilt_cutpoint_methods","text":"Returns vector cutpoint methods can used do_nmb_sim().","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_inbuilt_cutpoint_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a vector of all the inbuilt cutpoint methods — get_inbuilt_cutpoint_methods","text":"","code":"get_inbuilt_cutpoint_methods() #> [1] \"all\"              \"none\"             \"value_optimising\" \"youden\"           #> [5] \"cost_minimising\"  \"prod_sens_spec\"   \"roc01\"            \"index_of_union\""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_nmb_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a NMB sampler (an R function) for use in do_nmb_sim() or\nscreen_simulation_inputs() — get_nmb_sampler","title":"Make a NMB sampler (an R function) for use in do_nmb_sim() or\nscreen_simulation_inputs() — get_nmb_sampler","text":"Make NMB sampler (R function) use do_nmb_sim() screen_simulation_inputs()","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_nmb_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a NMB sampler (an R function) for use in do_nmb_sim() or\nscreen_simulation_inputs() — get_nmb_sampler","text":"","code":"get_nmb_sampler(   outcome_cost,   wtp,   qalys_lost,   high_risk_group_treatment_effect,   high_risk_group_treatment_cost,   low_risk_group_treatment_effect = 0,   low_risk_group_treatment_cost = 0,   use_expected_values = FALSE,   nboot = 10000 )"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_nmb_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a NMB sampler (an R function) for use in do_nmb_sim() or\nscreen_simulation_inputs() — get_nmb_sampler","text":"outcome_cost cost outcome. Must provided wtp qalys_lost . can used addition arguments represent additional cost health burden. wtp Willingness--pay. qalys_lost Quality-adjusted life years (QALYs) lost due healthcare event predicted. high_risk_group_treatment_effect effect treatment provided patients given high risk prediction. Can number function. Provide function incorporate uncertainty. high_risk_group_treatment_cost cost treatment provided patients given high risk prediction. Can number function. Provide function incorporate uncertainty. low_risk_group_treatment_effect effect treatment provided patients given low risk prediction. Can number function. Provide function incorporate uncertainty. Defaults 0 (treatment). low_risk_group_treatment_cost cost treatment provided patients given low risk prediction. Can number function. Provide function incorporate uncertainty. Defaults 0 (treatment). use_expected_values Logical. TRUE, gets mean many samples produced function returns every time. sensible choice using resulting function selecting cutpoint. See fx_nmb_training. Defaults FALSE. nboot number samples use creating function returns expected values. Defaults 10000.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_nmb_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a NMB sampler (an R function) for use in do_nmb_sim() or\nscreen_simulation_inputs() — get_nmb_sampler","text":"Returns function.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_nmb_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a NMB sampler (an R function) for use in do_nmb_sim() or\nscreen_simulation_inputs() — get_nmb_sampler","text":"","code":"get_nmb_training <- get_nmb_sampler(   outcome_cost = 100,   high_risk_group_treatment_effect = function() rbeta(1, 1, 2),   high_risk_group_treatment_cost = 10,   use_expected_values = TRUE ) get_nmb_evaluation <- get_nmb_sampler(   outcome_cost = 100,   high_risk_group_treatment_effect = function() rbeta(1, 1, 2),   high_risk_group_treatment_cost = 10 )  get_nmb_training() #>         TP         FP         TN         FN  #>  -76.98335  -10.00000    0.00000 -100.00000  get_nmb_training() #>         TP         FP         TN         FN  #>  -76.98335  -10.00000    0.00000 -100.00000  get_nmb_training() #>         TP         FP         TN         FN  #>  -76.98335  -10.00000    0.00000 -100.00000  get_nmb_evaluation() #>         TP         FP         TN         FN  #>  -73.34815  -10.00000    0.00000 -100.00000  get_nmb_evaluation() #>        TP        FP        TN        FN  #> -105.9895  -10.0000    0.0000 -100.0000  get_nmb_evaluation() #>         TP         FP         TN         FN  #>  -12.62959  -10.00000    0.00000 -100.00000"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples data for a prediction model with a specified AUC and prevalence. — get_sample","title":"Samples data for a prediction model with a specified AUC and prevalence. — get_sample","text":"Samples data prediction model specified AUC prevalence.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples data for a prediction model with a specified AUC and prevalence. — get_sample","text":"","code":"get_sample(auc, n_samples, prevalence, min_events = 0)"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples data for a prediction model with a specified AUC and prevalence. — get_sample","text":"auc Area (receiver operating characteristic) Curve. n_samples Number samples draw. prevalence Prevalence event rate binary outcome proportion (0.1 = 10%). min_events Minimum number events required sample.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Samples data for a prediction model with a specified AUC and prevalence. — get_sample","text":"Returns data.frame.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Samples data for a prediction model with a specified AUC and prevalence. — get_sample","text":"","code":"get_sample(0.7, 1000, 0.1) #>                 x actual #> 1     0.312668903      0 #> 2    -0.336993776      0 #> 3     0.275709912      0 #> 4    -0.307839852      0 #> 5    -0.442045111      0 #> 6     0.648878665      0 #> 7     1.146800873      0 #> 8    -0.437217730      0 #> 9    -0.700796703      0 #> 10   -0.892112412      0 #> 11   -1.603765818      0 #> 12   -0.927964386      0 #> 13   -0.148879610      0 #> 14   -0.043160607      0 #> 15    0.514156236      0 #> 16    0.502186273      0 #> 17   -1.344359938      0 #> 18    0.721028806      0 #> 19   -0.386765580      0 #> 20    0.349268138      0 #> 21   -0.621976009      0 #> 22   -0.103807083      0 #> 23   -0.488950699      0 #> 24    0.136247935      0 #> 25    0.589133037      0 #> 26   -0.491983757      0 #> 27   -0.149377587      0 #> 28    1.040129066      0 #> 29    0.307558686      0 #> 30    1.427981551      0 #> 31    0.576857765      0 #> 32   -0.648871107      0 #> 33   -0.250259198      0 #> 34    0.455327470      0 #> 35    0.183009473      0 #> 36    1.247074017      0 #> 37    1.432871288      0 #> 38    0.582097683      0 #> 39    0.094675052      0 #> 40   -0.470985903      0 #> 41   -0.211652404      0 #> 42   -1.835952477      0 #> 43    0.642111411      0 #> 44    2.422039078      0 #> 45   -1.767299038      0 #> 46    0.485967174      0 #> 47    1.802569421      0 #> 48   -0.142136604      0 #> 49   -1.093162640      0 #> 50    0.642807612      0 #> 51    0.234305726      0 #> 52   -0.736303160      0 #> 53    0.266275926      0 #> 54   -0.591228267      0 #> 55    1.754847743      0 #> 56    0.012795017      0 #> 57    1.114457606      0 #> 58   -0.470655142      0 #> 59    0.701911843      0 #> 60   -1.073428068      0 #> 61   -0.837517247      0 #> 62    1.339877138      0 #> 63    0.257107929      0 #> 64    0.344497262      0 #> 65    1.096372999      0 #> 66   -0.598355206      0 #> 67    0.232036556      0 #> 68   -1.446245530      0 #> 69   -1.170336399      0 #> 70   -0.587777054      0 #> 71    0.061777548      0 #> 72    1.610181271      0 #> 73   -1.220144900      0 #> 74    1.581310507      0 #> 75    0.203621062      0 #> 76    0.734295481      0 #> 77    0.364880871      0 #> 78   -0.089104818      0 #> 79    0.681978053      0 #> 80   -1.099485779      0 #> 81   -0.231080218      0 #> 82    0.452588458      0 #> 83    0.111325850      0 #> 84    0.401589029      0 #> 85   -0.417005405      0 #> 86   -0.050139688      0 #> 87    0.477094143      0 #> 88    0.767188631      0 #> 89   -0.200202626      0 #> 90   -0.975076360      0 #> 91   -0.141030015      0 #> 92    0.125755977      0 #> 93    2.423845075      0 #> 94    0.044146735      0 #> 95    0.420550607      0 #> 96    0.450696952      0 #> 97   -2.603239147      0 #> 98    0.240386281      0 #> 99    0.276333777      0 #> 100   0.015648471      0 #> 101  -0.894810128      0 #> 102   1.214583345      0 #> 103   1.174835682      0 #> 104   0.535495500      0 #> 105   0.980330775      0 #> 106  -0.181236193      0 #> 107  -0.914354087      0 #> 108   1.131432751      0 #> 109   2.659453028      0 #> 110   1.835971668      0 #> 111  -0.171297677      0 #> 112   1.350209494      0 #> 113   1.155942461      0 #> 114   0.387169010      0 #> 115  -0.673452309      0 #> 116   1.152272161      0 #> 117  -0.439957390      0 #> 118   0.205126275      0 #> 119  -0.258380427      0 #> 120  -0.776852885      0 #> 121  -1.052797562      0 #> 122   0.407397744      0 #> 123  -1.422707762      0 #> 124  -1.425219480      0 #> 125  -0.017520467      0 #> 126  -0.479281815      0 #> 127  -2.617458969      0 #> 128   0.372018643      0 #> 129  -0.933339210      0 #> 130  -1.123583670      0 #> 131  -1.101210603      0 #> 132  -0.639574576      0 #> 133  -0.965877833      0 #> 134  -1.305714133      0 #> 135  -0.077989497      0 #> 136  -1.235576581      0 #> 137  -1.233227751      0 #> 138   0.116337878      0 #> 139   0.836449153      0 #> 140  -0.395113783      0 #> 141  -0.053782007      0 #> 142  -1.374011503      0 #> 143   0.044890441      0 #> 144  -2.971702509      0 #> 145  -1.025216402      0 #> 146  -0.400696004      0 #> 147  -0.845112202      0 #> 148  -0.319730870      0 #> 149  -0.847172357      0 #> 150  -1.195769488      0 #> 151  -0.002873980      0 #> 152  -1.801071503      0 #> 153  -1.333834452      0 #> 154  -0.681580764      0 #> 155   1.753002939      0 #> 156   0.238183154      0 #> 157   0.586955181      0 #> 158  -0.649176459      0 #> 159  -1.564664137      0 #> 160  -1.956485920      0 #> 161  -1.147884640      0 #> 162  -0.316221777      0 #> 163   0.220647052      0 #> 164   1.002368025      0 #> 165   0.383101001      0 #> 166  -0.735656382      0 #> 167   0.151053852      0 #> 168  -0.172917500      0 #> 169   0.424624838      0 #> 170   0.918087099      0 #> 171   1.345530354      0 #> 172  -0.015857795      0 #> 173   0.238545702      0 #> 174  -0.480043990      0 #> 175  -0.927542344      0 #> 176  -0.814673066      0 #> 177  -0.951508492      0 #> 178  -0.160785148      0 #> 179  -0.208230454      0 #> 180   0.628435179      0 #> 181  -0.319086847      0 #> 182  -0.687951486      0 #> 183  -1.960414353      0 #> 184   1.446095171      0 #> 185  -0.819094283      0 #> 186   1.325689021      0 #> 187  -0.387015255      0 #> 188   0.328187480      0 #> 189  -0.059663040      0 #> 190   0.210437664      0 #> 191  -0.215202130      0 #> 192   0.065718553      0 #> 193  -0.680591154      0 #> 194   1.670693231      0 #> 195  -0.397820395      0 #> 196  -0.562061309      0 #> 197  -2.019442065      0 #> 198   0.589708264      0 #> 199   0.096178161      0 #> 200  -0.125217110      0 #> 201  -0.527728926      0 #> 202   0.481796041      0 #> 203  -0.603822001      0 #> 204  -0.076922471      0 #> 205   0.538299067      0 #> 206  -0.319459869      0 #> 207  -1.473934112      0 #> 208  -0.410924749      0 #> 209  -0.287805598      0 #> 210  -0.573270184      0 #> 211  -1.135185787      0 #> 212   1.174942480      0 #> 213   0.226655404      0 #> 214   0.735720162      0 #> 215   0.230777483      0 #> 216   0.249750095      0 #> 217  -0.327437376      0 #> 218  -0.071374420      0 #> 219  -1.770478368      0 #> 220   1.353840835      0 #> 221  -0.367741936      0 #> 222  -1.366702730      0 #> 223  -0.804125439      0 #> 224   1.069284784      0 #> 225  -0.063642385      0 #> 226  -0.142465031      0 #> 227   0.232447338      0 #> 228  -2.330972140      0 #> 229   1.537548204      0 #> 230  -2.345941019      0 #> 231  -0.813187591      0 #> 232  -0.710700308      0 #> 233   0.618969254      0 #> 234   0.488151607      0 #> 235   0.745172890      0 #> 236   0.929922740      0 #> 237   0.962143641      0 #> 238   1.423865094      0 #> 239  -1.352663019      0 #> 240   1.641408560      0 #> 241   1.352520421      0 #> 242   0.126407695      0 #> 243   0.372548479      0 #> 244   1.199909297      0 #> 245   0.083440503      0 #> 246  -0.484467567      0 #> 247  -0.786216090      0 #> 248  -1.575362901      0 #> 249  -0.420588584      0 #> 250   0.692608269      0 #> 251   0.046919360      0 #> 252  -0.224755815      0 #> 253   0.477464152      0 #> 254   0.404988774      0 #> 255   0.089532946      0 #> 256  -0.088280083      0 #> 257  -0.685674704      0 #> 258  -1.096604855      0 #> 259   1.594395633      0 #> 260  -1.877566076      0 #> 261   0.747778079      0 #> 262   0.243996925      0 #> 263   1.414591211      0 #> 264   1.965105983      0 #> 265   0.326089913      0 #> 266  -0.248542183      0 #> 267   0.520395923      0 #> 268   1.266173945      0 #> 269  -0.961945226      0 #> 270   0.419620351      0 #> 271  -0.403755229      0 #> 272   0.512876204      0 #> 273  -1.735050971      0 #> 274   0.806977156      0 #> 275   0.800317179      0 #> 276  -0.770136763      0 #> 277   1.639992008      0 #> 278   0.468203557      0 #> 279   0.735571407      0 #> 280   1.103699440      0 #> 281   0.252997779      0 #> 282   1.143625302      0 #> 283   1.638832840      0 #> 284  -0.123181883      0 #> 285  -0.046799378      0 #> 286   1.016632691      0 #> 287   1.310445352      0 #> 288  -0.786026920      0 #> 289  -2.322636485      0 #> 290   0.822501740      0 #> 291  -0.167350135      0 #> 292  -1.162532020      0 #> 293  -0.179382613      0 #> 294  -0.682520843      0 #> 295  -0.050588959      0 #> 296  -0.366313400      0 #> 297   0.790501697      0 #> 298  -0.470447474      0 #> 299   2.109474187      0 #> 300   0.664077745      0 #> 301   1.901859697      0 #> 302  -1.307057778      0 #> 303  -0.860237638      0 #> 304   1.580202439      0 #> 305  -1.066645230      0 #> 306   0.076641744      0 #> 307   1.898041474      0 #> 308  -0.469413054      0 #> 309   1.773957848      0 #> 310  -0.021959611      0 #> 311  -0.044471950      0 #> 312   0.733700980      0 #> 313   0.379323897      0 #> 314   1.043081706      0 #> 315   1.137284311      0 #> 316   0.860518551      0 #> 317  -2.522941429      0 #> 318   0.190082582      0 #> 319  -0.009689414      0 #> 320   0.280134490      0 #> 321   2.038931863      0 #> 322  -1.735202607      0 #> 323  -1.506162051      0 #> 324   0.469480267      0 #> 325   0.711407516      0 #> 326   0.675168025      0 #> 327   0.089290103      0 #> 328  -1.075746665      0 #> 329   0.162101742      0 #> 330  -1.028562497      0 #> 331  -0.263730441      0 #> 332   0.658897166      0 #> 333  -0.288659832      0 #> 334   0.882522563      0 #> 335   0.084171955      0 #> 336  -0.326487013      0 #> 337  -1.716158208      0 #> 338  -0.234091369      0 #> 339   1.061118096      0 #> 340   0.597121721      0 #> 341  -1.035163315      0 #> 342   0.154552865      0 #> 343  -0.302863599      0 #> 344  -1.472669944      0 #> 345   0.660647696      0 #> 346  -0.144880752      0 #> 347  -1.126670627      0 #> 348   0.345964447      0 #> 349   1.116975193      0 #> 350   0.156542762      0 #> 351   0.949740027      0 #> 352   0.983730325      0 #> 353  -0.444512376      0 #> 354  -1.370481285      0 #> 355  -1.222895190      0 #> 356  -0.646309687      0 #> 357  -0.647091440      0 #> 358   1.323529612      0 #> 359   1.167848997      0 #> 360  -0.812799829      0 #> 361  -0.009777656      0 #> 362  -0.632746514      0 #> 363   0.607305314      0 #> 364   1.127866730      0 #> 365   0.401697990      0 #> 366  -0.062045340      0 #> 367   0.315142111      0 #> 368  -1.019349158      0 #> 369  -0.525730311      0 #> 370   1.256199429      0 #> 371  -0.030031831      0 #> 372  -1.189932179      0 #> 373  -0.061041284      0 #> 374  -0.460087939      0 #> 375   1.735030505      0 #> 376   0.231264459      0 #> 377   0.018831045      0 #> 378   0.221993288      0 #> 379  -1.206562474      0 #> 380   1.371244663      0 #> 381   0.390595080      0 #> 382   0.311931071      0 #> 383   1.100703000      0 #> 384  -0.771858593      0 #> 385   0.683621129      0 #> 386   0.006013099      0 #> 387   0.259989878      0 #> 388  -0.434824573      0 #> 389  -1.655205260      0 #> 390   0.852744745      0 #> 391  -1.495814092      0 #> 392   0.881447451      0 #> 393   2.422962851      0 #> 394   0.758630798      0 #> 395   0.433579148      0 #> 396   0.642095381      0 #> 397  -0.565163709      0 #> 398  -1.306104655      0 #> 399  -1.442123212      0 #> 400   0.789310567      0 #> 401  -0.711095870      0 #> 402   0.994207152      0 #> 403  -1.548869024      0 #> 404  -1.029340634      0 #> 405  -0.014336018      0 #> 406   1.406276923      0 #> 407  -1.928341072      0 #> 408  -1.647016764      0 #> 409  -0.417516257      0 #> 410  -0.113243466      0 #> 411   0.272761615      0 #> 412  -1.810277645      0 #> 413   0.546735163      0 #> 414  -0.154846082      0 #> 415  -0.724589421      0 #> 416   0.403524935      0 #> 417  -0.819819165      0 #> 418  -1.306138211      0 #> 419   0.297725363      0 #> 420  -0.528504682      0 #> 421   0.496430383      0 #> 422   0.284448042      0 #> 423   0.500912865      0 #> 424  -1.175630329      0 #> 425  -0.917099370      0 #> 426   0.109251133      0 #> 427   0.857501610      0 #> 428   1.662583970      0 #> 429   0.364295188      0 #> 430  -0.359900553      0 #> 431   0.407034743      0 #> 432  -0.072295519      0 #> 433   0.161664015      0 #> 434   0.710629958      0 #> 435  -1.530511571      0 #> 436   1.077410961      0 #> 437   0.670497891      0 #> 438  -1.674920316      0 #> 439   1.977915086      0 #> 440  -1.103098549      0 #> 441  -0.143321611      0 #> 442  -1.118388948      0 #> 443   0.371155403      0 #> 444   2.235132100      0 #> 445  -0.373067466      0 #> 446   0.123355570      0 #> 447  -0.497414828      0 #> 448   0.279069460      0 #> 449  -0.822992478      0 #> 450  -1.590182266      0 #> 451  -0.597519010      0 #> 452  -1.123863487      0 #> 453   1.073122316      0 #> 454  -0.131975695      0 #> 455   2.332172320      0 #> 456  -0.968689195      0 #> 457  -0.555620784      0 #> 458  -0.490464693      0 #> 459  -0.103044415      0 #> 460   1.923023840      0 #> 461   0.756214801      0 #> 462  -1.158432834      0 #> 463  -0.554390858      0 #> 464  -1.208002561      0 #> 465  -1.054378611      0 #> 466  -0.506775373      0 #> 467   0.733870803      0 #> 468  -0.563417039      0 #> 469  -0.479719769      0 #> 470  -0.582942406      0 #> 471  -0.546514797      0 #> 472   0.021028705      0 #> 473   0.487386141      0 #> 474  -0.393092553      0 #> 475  -0.430038478      0 #> 476  -1.465339848      0 #> 477   0.604579096      0 #> 478  -0.460627299      0 #> 479  -0.492541765      0 #> 480   0.889378723      0 #> 481  -0.362276918      0 #> 482   0.377157867      0 #> 483  -0.520674962      0 #> 484  -0.914438169      0 #> 485  -0.298112732      0 #> 486  -0.260925943      0 #> 487  -0.868566509      0 #> 488  -0.430269340      0 #> 489   1.367016697      0 #> 490   0.023662294      0 #> 491  -0.507976119      0 #> 492   0.099677168      0 #> 493   0.721689330      0 #> 494   1.036373277      0 #> 495   0.776445479      0 #> 496  -1.211586596      0 #> 497  -0.049874688      0 #> 498  -0.117649287      0 #> 499   1.018606364      0 #> 500  -0.084323264      0 #> 501   0.717694915      0 #> 502   0.939971315      0 #> 503  -0.285094337      0 #> 504   0.368479072      0 #> 505  -0.277243901      0 #> 506   1.209725587      0 #> 507   0.749669054      0 #> 508  -0.826642877      0 #> 509   0.895270199      0 #> 510  -0.976351976      0 #> 511  -0.618084238      0 #> 512  -1.489022287      0 #> 513   1.961827948      0 #> 514   1.912363950      0 #> 515  -0.047135846      0 #> 516  -0.155190313      0 #> 517  -0.041852330      0 #> 518   1.069924935      0 #> 519  -0.795798556      0 #> 520   0.364047592      0 #> 521  -0.029615278      0 #> 522  -0.815516139      0 #> 523  -0.865010804      0 #> 524   1.251288852      0 #> 525   0.251921223      0 #> 526  -0.839176702      0 #> 527  -0.035382423      0 #> 528  -1.041560616      0 #> 529   0.992990267      0 #> 530   0.959214102      0 #> 531  -0.554511955      0 #> 532   0.572310236      0 #> 533  -0.317216116      0 #> 534   1.085482840      0 #> 535   1.577965341      0 #> 536  -0.816947794      0 #> 537  -0.987013424      0 #> 538   0.976071180      0 #> 539  -0.581577500      0 #> 540  -2.773719114      0 #> 541   0.936769195      0 #> 542   0.371476478      0 #> 543  -0.923949079      0 #> 544   0.112588924      0 #> 545   0.932432479      0 #> 546   1.476017965      0 #> 547  -1.187065745      0 #> 548  -0.054778231      0 #> 549  -0.963758405      0 #> 550  -0.412028242      0 #> 551  -0.935088265      0 #> 552   0.786217708      0 #> 553  -0.928041749      0 #> 554  -0.079289073      0 #> 555  -0.321346606      0 #> 556  -1.303518969      0 #> 557   0.909881695      0 #> 558   1.389931201      0 #> 559  -1.036005533      0 #> 560  -2.838232830      0 #> 561   0.893211460      0 #> 562   0.219995360      0 #> 563   0.770327072      0 #> 564  -0.383761135      0 #> 565  -0.139551320      0 #> 566  -1.062162654      0 #> 567   1.296162126      0 #> 568   0.085218525      0 #> 569   1.298301330      0 #> 570   0.017382760      0 #> 571   0.170377723      0 #> 572  -0.995128292      0 #> 573   0.855769455      0 #> 574  -0.235460199      0 #> 575  -1.156911004      0 #> 576  -1.167720639      0 #> 577  -0.824517122      0 #> 578   0.059913708      0 #> 579   0.056825859      0 #> 580  -0.364797286      0 #> 581   1.099244153      0 #> 582   0.095405159      0 #> 583   0.833180900      0 #> 584   1.760429880      0 #> 585  -1.602342345      0 #> 586  -1.450470991      0 #> 587  -0.273267728      0 #> 588  -1.337159219      0 #> 589   1.704485074      0 #> 590   1.546834098      0 #> 591  -0.561143510      0 #> 592   1.663155501      0 #> 593  -0.950339587      0 #> 594  -0.017420077      0 #> 595   0.453662007      0 #> 596  -0.725892302      0 #> 597  -0.327059851      0 #> 598  -0.557322561      0 #> 599  -0.345493546      0 #> 600  -0.603348022      0 #> 601  -0.495862236      0 #> 602   0.687161191      0 #> 603  -0.487407796      0 #> 604   0.042255353      0 #> 605   0.143407071      0 #> 606   1.040819253      0 #> 607   0.568953743      0 #> 608  -0.175682093      0 #> 609   0.767798485      0 #> 610   1.521194249      0 #> 611  -1.239400706      0 #> 612   0.008178102      0 #> 613   0.757221372      0 #> 614   1.565364744      0 #> 615  -0.393377660      0 #> 616  -0.031594663      0 #> 617  -0.100840127      0 #> 618  -1.241195743      0 #> 619   0.547884329      0 #> 620  -0.768545157      0 #> 621   0.335791438      0 #> 622  -0.967985771      0 #> 623  -1.978300289      0 #> 624  -0.782445864      0 #> 625  -1.239909950      0 #> 626   0.752868258      0 #> 627  -0.355907928      0 #> 628   0.931048128      0 #> 629  -1.005584120      0 #> 630   2.224069863      0 #> 631   1.158858190      0 #> 632   0.697722416      0 #> 633   0.868032576      0 #> 634   0.338096227      0 #> 635   2.154489954      0 #> 636  -0.847068545      0 #> 637   0.280992694      0 #> 638  -1.310337689      0 #> 639  -2.823678548      0 #> 640   0.388259098      0 #> 641  -0.311500779      0 #> 642   0.197602040      0 #> 643  -0.237670966      0 #> 644   0.372180556      0 #> 645  -1.471743118      0 #> 646  -1.498318645      0 #> 647   0.537626073      0 #> 648  -1.167505337      0 #> 649   0.022957157      0 #> 650  -0.799275160      0 #> 651   1.100363272      0 #> 652  -0.318411590      0 #> 653   0.398357215      0 #> 654   0.027162071      0 #> 655  -0.350190076      0 #> 656  -0.575644110      0 #> 657  -1.968301190      0 #> 658  -0.618048737      0 #> 659   0.173189322      0 #> 660   0.060568875      0 #> 661   0.094559870      0 #> 662  -0.127788774      0 #> 663  -0.017672685      0 #> 664  -0.425859562      0 #> 665   1.186552120      0 #> 666  -1.587609278      0 #> 667  -0.848734452      0 #> 668   0.163556227      0 #> 669  -0.022235874      0 #> 670  -0.598142229      0 #> 671   0.002166245      0 #> 672  -0.278808652      0 #> 673   1.357181674      0 #> 674  -0.957157323      0 #> 675   1.812379975      0 #> 676   0.329332947      0 #> 677  -0.160711989      0 #> 678  -2.977246935      0 #> 679  -0.814542948      0 #> 680   0.120060068      0 #> 681   0.228510340      0 #> 682   1.142750977      0 #> 683   0.700755695      0 #> 684  -0.242034860      0 #> 685  -0.341762332      0 #> 686  -0.468474538      0 #> 687   0.365689249      0 #> 688  -0.595759463      0 #> 689   0.006284408      0 #> 690  -0.651673518      0 #> 691  -0.759685849      0 #> 692   0.703786197      0 #> 693  -0.250229790      0 #> 694   0.718005789      0 #> 695  -0.315056229      0 #> 696  -0.366535026      0 #> 697  -0.121721842      0 #> 698  -1.880802048      0 #> 699  -2.792711334      0 #> 700   0.198199054      0 #> 701   1.680875610      0 #> 702  -0.255728628      0 #> 703   1.282830616      0 #> 704   0.175189359      0 #> 705  -0.953277876      0 #> 706  -0.444018616      0 #> 707   0.445193774      0 #> 708   1.853190539      0 #> 709   1.458736581      0 #> 710   1.275487218      0 #> 711   1.210591707      0 #> 712  -0.473054108      0 #> 713  -0.783197163      0 #> 714   0.151278637      0 #> 715  -1.394298761      0 #> 716   0.504383044      0 #> 717  -0.799282250      0 #> 718   0.364159411      0 #> 719   0.420685435      0 #> 720  -2.138296637      0 #> 721   1.698734856      0 #> 722   0.063210832      0 #> 723  -0.051148046      0 #> 724   0.924321827      0 #> 725  -0.999423031      0 #> 726   1.563113319      0 #> 727  -0.629619466      0 #> 728   0.166973042      0 #> 729  -0.384416088      0 #> 730   1.077870826      0 #> 731  -0.073765241      0 #> 732   0.094707065      0 #> 733  -0.997443128      0 #> 734   2.299179945      0 #> 735  -0.931231939      0 #> 736   0.304877498      0 #> 737   0.213198112      0 #> 738  -0.966939696      0 #> 739   0.203712998      0 #> 740   1.566280677      0 #> 741   1.708059305      0 #> 742   0.649203326      0 #> 743  -0.998343800      0 #> 744  -0.211488704      0 #> 745  -0.268858877      0 #> 746   0.751897875      0 #> 747  -0.009273057      0 #> 748  -0.242432304      0 #> 749  -0.422446073      0 #> 750  -1.479946604      0 #> 751   0.175332268      0 #> 752   0.215259556      0 #> 753   1.171628293      0 #> 754  -0.096448725      0 #> 755  -0.511806200      0 #> 756   0.109135810      0 #> 757   0.045533089      0 #> 758  -1.606976568      0 #> 759  -0.386547338      0 #> 760  -0.894966260      0 #> 761   1.532686794      0 #> 762   0.285850307      0 #> 763   1.043322574      0 #> 764   0.084502565      0 #> 765   1.506110753      0 #> 766   1.717781228      0 #> 767  -1.201559752      0 #> 768   0.856663080      0 #> 769   0.091047557      0 #> 770   0.798051194      0 #> 771   1.942567553      0 #> 772  -1.807634647      0 #> 773   1.331710375      0 #> 774  -2.551267311      0 #> 775  -0.170566489      0 #> 776   0.733780461      0 #> 777   0.304100946      0 #> 778   0.575416796      0 #> 779  -1.356641224      0 #> 780  -0.026324905      0 #> 781   0.603514339      0 #> 782   0.451752336      0 #> 783   2.056413827      0 #> 784   1.283058597      0 #> 785   1.401335518      0 #> 786   0.182526343      0 #> 787  -1.609500888      0 #> 788   0.562890853      0 #> 789  -0.046032646      0 #> 790  -0.755858640      0 #> 791  -1.271483161      0 #> 792  -0.565799736      0 #> 793  -0.863503514      0 #> 794  -0.944853631      0 #> 795   0.370433718      0 #> 796   1.092202961      0 #> 797   1.133789548      0 #> 798  -0.922532489      0 #> 799   0.763542761      0 #> 800   0.705993387      0 #> 801  -1.555016013      0 #> 802   0.523649824      0 #> 803   0.001877669      0 #> 804   1.147839427      0 #> 805  -1.352587246      0 #> 806   0.858363662      0 #> 807  -0.360691757      0 #> 808  -1.060985382      0 #> 809  -1.414684949      0 #> 810  -0.325616643      0 #> 811   0.904399225      0 #> 812   0.781520763      0 #> 813   0.635960184      0 #> 814   0.837921347      0 #> 815   1.026943164      0 #> 816   0.904051944      0 #> 817  -0.520068974      0 #> 818  -0.434701648      0 #> 819   1.341133425      0 #> 820   0.516259704      0 #> 821   1.635561506      0 #> 822  -0.489727523      0 #> 823   0.511044896      0 #> 824   0.561365755      0 #> 825   0.949147568      0 #> 826   0.971681938      0 #> 827   1.704686567      0 #> 828   1.206085642      0 #> 829  -1.479484550      0 #> 830   0.400783121      0 #> 831  -0.771128681      0 #> 832  -1.297293916      0 #> 833   0.838967235      0 #> 834  -1.762714318      0 #> 835  -0.879232212      0 #> 836  -2.363335766      0 #> 837   2.229400608      0 #> 838   1.200864966      0 #> 839   1.258564875      0 #> 840  -0.056648329      0 #> 841   0.066459619      0 #> 842   1.589512594      0 #> 843  -1.096912860      0 #> 844   0.415773902      0 #> 845  -1.576761280      0 #> 846  -0.262687008      0 #> 847  -0.320416273      0 #> 848   0.181992980      0 #> 849   0.291598021      0 #> 850   0.274928988      0 #> 851   0.181075552      0 #> 852  -0.218924677      0 #> 853   0.564289802      0 #> 854  -0.109914801      0 #> 855  -0.632056701      0 #> 856  -0.325093765      0 #> 857  -0.626072016      0 #> 858  -0.917720489      0 #> 859   0.381406447      0 #> 860  -1.635581790      0 #> 861  -0.792121005      0 #> 862  -0.830900180      0 #> 863  -2.028234398      0 #> 864   0.472579001      0 #> 865   0.742704424      0 #> 866  -0.233598280      0 #> 867   0.116576921      0 #> 868  -0.161976076      0 #> 869  -0.596584729      0 #> 870   0.958658743      0 #> 871   0.215865512      0 #> 872   0.964992650      0 #> 873  -0.153476602      0 #> 874  -1.503231510      0 #> 875   1.276844834      0 #> 876   1.217591222      0 #> 877   1.029303749      0 #> 878  -0.639710700      0 #> 879   0.451150831      0 #> 880   0.068181187      0 #> 881   0.668494132      0 #> 882   0.930734649      0 #> 883   1.835188291      0 #> 884  -0.699889183      0 #> 885  -0.407553449      0 #> 886   1.167346157      0 #> 887   0.791716364      0 #> 888   0.866639549      0 #> 889   0.091459246      0 #> 890  -1.929938768      0 #> 891   0.755021819      0 #> 892   1.035928392      0 #> 893   1.251174377      0 #> 894   0.367673994      0 #> 895  -0.328517417      0 #> 896   0.117268747      0 #> 897  -0.355750896      0 #> 898   0.291753436      0 #> 899   0.392895610      0 #> 900   0.863242338      0 #> 901  -0.967119605      0 #> 902  -1.567897661      0 #> 903   0.913662434      0 #> 904   0.683470151      0 #> 905   0.848356792      0 #> 906   1.137429365      1 #> 907   2.149352308      1 #> 908   0.339117468      1 #> 909   0.423866440      1 #> 910   2.060910154      1 #> 911  -1.232022528      1 #> 912   1.436760154      1 #> 913   1.441375376      1 #> 914   0.283468316      1 #> 915   1.076195790      1 #> 916   1.403795018      1 #> 917   1.733778359      1 #> 918   2.295587701      1 #> 919  -0.103570077      1 #> 920   2.323204253      1 #> 921   2.044279699      1 #> 922  -0.645693417      1 #> 923   2.013812615      1 #> 924   1.365610517      1 #> 925   0.620919235      1 #> 926   1.141665938      1 #> 927  -0.646197383      1 #> 928   2.399438123      1 #> 929   1.166636066      1 #> 930   1.077996116      1 #> 931   0.716324167      1 #> 932   1.043394847      1 #> 933   0.355934626      1 #> 934  -0.217533906      1 #> 935   1.092855576      1 #> 936  -0.129945324      1 #> 937   1.667224429      1 #> 938  -1.406145774      1 #> 939   0.603871710      1 #> 940   1.233963314      1 #> 941   1.164677037      1 #> 942   1.497261634      1 #> 943   1.044239379      1 #> 944   0.625624119      1 #> 945  -1.062902176      1 #> 946   0.978911894      1 #> 947   0.987395434      1 #> 948   1.136808641      1 #> 949   2.664717448      1 #> 950   1.991322885      1 #> 951  -1.880600081      1 #> 952   0.760537099      1 #> 953   0.632994612      1 #> 954   1.593890362      1 #> 955   1.349317125      1 #> 956   0.571150145      1 #> 957   2.029262638      1 #> 958   0.548711135      1 #> 959  -0.067230523      1 #> 960  -0.673937100      1 #> 961   0.189206725      1 #> 962   2.729886239      1 #> 963   1.079636916      1 #> 964   0.109551675      1 #> 965   1.115743460      1 #> 966   0.178079812      1 #> 967   2.054789699      1 #> 968  -0.201638387      1 #> 969   1.877091390      1 #> 970   1.510156183      1 #> 971   1.938884098      1 #> 972   2.404699533      1 #> 973   0.907323343      1 #> 974   1.500629872      1 #> 975  -0.045906531      1 #> 976   1.063068412      1 #> 977   0.499292705      1 #> 978   0.382229156      1 #> 979   1.373430994      1 #> 980   0.435069042      1 #> 981   1.140615500      1 #> 982  -0.487503094      1 #> 983  -1.049113110      1 #> 984   0.749453785      1 #> 985   2.394815096      1 #> 986   0.864124952      1 #> 987   1.808931315      1 #> 988   2.416522468      1 #> 989   1.130624857      1 #> 990   1.338079506      1 #> 991   1.387247933      1 #> 992   0.928208935      1 #> 993   0.961365906      1 #> 994  -1.115988346      1 #> 995   0.884346681      1 #> 996   0.922128340      1 #> 997   2.096462784      1 #> 998   0.028134777      1 #> 999  -0.228779778      1 #> 1000 -0.401933027      1"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets probability thresholds given predicted probabilities, outcomes and NMB. — get_thresholds","title":"Gets probability thresholds given predicted probabilities, outcomes and NMB. — get_thresholds","text":"Gets probability thresholds given predicted probabilities, outcomes NMB.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets probability thresholds given predicted probabilities, outcomes and NMB. — get_thresholds","text":"","code":"get_thresholds(predicted, actual, nmb, cutpoint_methods = NULL)"},{"path":"https://rwparsons.github.io/predictNMB/reference/get_thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets probability thresholds given predicted probabilities, outcomes and NMB. — get_thresholds","text":"predicted vector predicted probabilities. actual vector actual outcomes. nmb named vector containing NMB assigned true positives, true negatives, false positives false negatives cutpoint_methods cutpoint method(s) return. default (NULL) uses inbuilt methods.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_thresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets probability thresholds given predicted probabilities, outcomes and NMB. — get_thresholds","text":"Returns list.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/get_thresholds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets probability thresholds given predicted probabilities, outcomes and NMB. — get_thresholds","text":"","code":"# get thresholds using default (all inbuilt) cutpoint methods get_thresholds(   predicted = runif(1000),   actual = sample(c(0, 1), size = 1000, replace = TRUE),   nmb = c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4) ) #>              all             none value_optimising           youden  #>        0.0000000        1.0000000        0.2064724        0.2924578  #>  cost_minimising   prod_sens_spec            roc01   index_of_union  #>        0.5000000        0.5578369        0.5578369        0.5029694    # get cutpoints using user-defined functions # These functions must take the \\code{predicted} and \\code{actual} # as arguments. They can also take \\code{nmb} (named vector containing NMB # with values for TP, FP, TN, FN). fx_roc01 <- function(predicted, actual, ...) {   cutpointr::cutpointr(     x = predicted, class = actual, method = cutpointr::minimize_metric,     metric = cutpointr::roc01,     silent = TRUE   )[[\"optimal_cutpoint\"]] }  fx_sum_sens_spec <- function(predicted, actual, ...) {   cutpointr::cutpointr(     x = predicted, class = actual, method = cutpointr::maximize_metric,     metric = cutpointr::sum_sens_spec,     silent = TRUE   )[[\"optimal_cutpoint\"]] }  get_thresholds(   predicted = runif(1000),   actual = sample(c(0, 1), size = 1000, replace = TRUE),   cutpoint_methods = c(\"fx_roc01\", \"fx_sum_sens_spec\"),   nmb = c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4) ) #> Error in fx_roc01(predicted = c(0.406530357897282, 0.0705207374412566, 0.905613062437624, 0.711933846818283, 0.368743092054501, 0.0178812702652067, 0.741178360069171, 0.705952757271007, 0.125464358599856, 0.665191532112658, 0.832641773158684, 0.455835211090744, 0.246733186999336, 0.515236348146573, 0.0507177808322012, 0.299544502282515, 0.58706625807099, 0.496468377299607, 0.785656521795318, 0.933663251809776, 0.177862716140226, 0.10919430712238, 0.573079632362351, 0.533408474409953, 0.649398681940511, 0.179913510335609, 0.485236146487296, 0.810958281625062, 0.829886066261679, 0.183212448609993, 0.658980888780206, 0.39040808333084, 0.604866002453491, 0.922802614048123, 0.385532149113715, 0.640949672786519, 0.350102401804179, 0.574750919826329, 0.374340692302212, 0.0745399659499526, 0.938041258603334, 0.480342473834753, 0.180385068291798, 0.508872100617737, 0.211646287236363, 0.488532272167504, 0.39691781019792, 0.792602020781487, 0.166785796172917, 0.0526895667426288, 0.714082609163597, 0.153466489166021, 0.923228471074253, 0.894407750573009, 0.0556839010678232, 0.0549704185687006, 0.876089610392228, 0.420169166987762, 0.0172867788933218, 0.612718833610415, 0.438255702611059, 0.27040407480672, 0.879870972130448, 0.412056368310004, 0.336228199535981, 0.367903211619705, 0.0374253592453897, 0.51795577048324, 0.352413653861731, 0.722955849720165, 0.477457197150216, 0.694914241554216, 0.218417062656954, 0.763730878243223, 0.20247470936738, 0.214336328906938, 0.326802856754512, 0.977987005375326, 0.567830530460924, 0.354365386068821, 0.608943011844531, 0.90454940055497, 0.995615585939959, 8.52285884320736e-05, 0.445208332501352, 0.349960461026058, 0.548017578665167, 0.121463768882677, 0.221865197876468, 0.654424561653286, 0.878710958873853, 0.255868601845577, 0.245714128017426, 0.0413475935347378, 0.416097189532593, 0.792584357317537, 0.311906705843285, 0.188073334982619, 0.973868335364386, 0.0804309574887156, 0.907655903836712, 0.970570337260142, 0.928638509009033, 0.184453525347635, 0.759605168830603, 0.981278487946838, 0.891019668895751, 0.579254631884396, 0.114946816349402, 0.991681825369596, 0.466765143210068, 0.814804775174707, 0.379176945891231, 0.514850117033347, 0.878605401841924, 0.216253825696185, 0.416039071511477, 0.390844194218516, 0.535266599385068, 0.0644765545148402, 0.17548521887511, 0.9685533803422, 0.69596457364969, 0.0573996126186103, 0.999691231641918, 0.480187339242548, 0.387479098513722, 0.784961844561622, 0.855815920745954, 0.461749357404187, 0.061088518705219, 0.144270776305348, 0.917789130238816, 0.197157907532528, 0.409639217890799, 0.668129557976499, 0.397598857991397, 0.0867577553726733, 0.165871429489926, 0.658820364158601, 0.290550481760874, 0.438531832303852, 0.348966187797487, 0.50226275017485, 0.833781336201355, 0.670516092563048, 0.422119292197749, 0.851229408755898, 0.053350361995399, 0.545346457511187, 0.39322421210818, 0.174147037090734, 0.716904334723949, 0.269308123271912, 0.549778134794906, 0.86250276514329, 0.360615058336407, 0.163235268322751, 0.950149012496695, 0.480132534867153, 0.55528535367921, 0.29518268047832, 0.669151103822514, 0.398534797597677, 0.888122159987688, 0.17861410183832, 0.469309739535674, 0.886102410499007, 0.838386549148709, 0.856676845811307, 0.276737307198346, 0.751960817258805, 0.49647129746154, 0.414469928247854, 0.687627848237753, 0.504890743410215, 0.0654497467912734, 0.858568442752585, 0.7164894239977, 0.0870660836808383, 0.746093649882823, 0.639645168092102, 0.154678944032639, 0.306644510477781, 0.770936211105436, 0.234310369007289, 0.23041174467653, 0.641212276415899, 0.142372202593833, 0.192694335477427, 0.901137099368498, 0.239019728265703, 0.468958762707189, 0.265371708199382, 0.988876507617533, 0.362780595198274, 0.950970195000991, 0.782308415975422, 0.366950512165204, 0.754405561834574, 0.0993445902131498, 0.478131658630446, 0.461092984769493, 0.0525956465862691, 0.984504049411044, 0.384090226376429, 0.0740060326643288, 0.857998383929953, 0.399780116276816, 0.0100640126038343, 0.756974168820307, 0.0312179999891669, 0.148002971429378, 0.967713694553822, 0.993504193844274, 0.443386680213735, 0.100850564194843, 0.693103089928627, 0.305401676800102, 0.921455263160169, 0.638624014565721, 0.733852613484487, 0.64318343764171, 0.876161921769381, 0.0742887265514582, 0.0917048158589751, 0.278356074821204, 0.886804015841335, 0.106560417450964, 0.900503810727969, 0.976510700769722, 0.544458300573751, 0.489116365555674, 0.270015018060803, 0.5727707920596, 0.346755811013281, 0.769096295116469, 0.177890758030117, 0.316419901559129, 0.0998046260792762, 0.282192833954468, 0.507681683870032, 0.597502385498956, 0.140048980945721, 0.880100389942527, 0.0629673397634178, 0.766823729965836, 0.600965675897896, 0.498504027025774, 0.0868848639074713, 0.988656521309167, 0.736770977964625, 0.977685654070228, 0.311576512409374, 0.893061565700918, 0.150971277151257, 0.70841219718568, 0.396164575591683, 0.838106608949602, 0.526390144368634, 0.800355219049379, 0.724999880883843, 0.867784664034843, 0.169751249719411, 0.541592641500756, 0.567009993828833, 0.948527722153813, 0.79747953126207, 0.779465828323737, 0.342275221366435, 0.490501638967544, 0.0384862886276096, 0.647880130214617, 0.108850351534784, 0.458519004983827, 0.996229821583256, 0.607406962430105, 0.203442725585774, 0.845114667201415, 0.678358677774668, 0.859051735838875, 0.52731116884388, 0.87973780115135, 0.383608988719061, 0.454450331395492, 0.258037309162319, 0.855186929693446, 0.907428230158985, 0.859118762658909, 0.0981951428111643, 0.304888331796974, 0.352613066788763, 0.585992755834013, 0.174826913513243, 0.968355519929901, 0.181272484129295, 0.232370350975543, 0.721781883854419, 0.792383641935885, 0.915899718413129, 0.847569665405899, 0.483040808700025, 0.972778275609016, 0.868038854328915, 0.66932271560654, 0.968268186319619, 0.937029905151576, 0.348572355229408, 0.349869540194049, 0.502621744060889, 0.191180283436552, 0.492177519248798, 0.3782222061418, 0.284009434748441, 0.167172219138592, 0.177235797513276, 0.409447904210538, 0.750825218390673, 0.656370509881526, 0.614721560152248, 0.808099873596802, 0.960760712856427, 0.0573355106171221, 0.820065308827907, 0.804603402735665, 0.41179385734722, 0.290958081139252, 0.751818471588194, 0.172087196959183, 0.768097530351952, 0.379026303300634, 0.82747091143392, 0.471749164164066, 0.448430554009974, 0.628054237226024, 0.67165285651572, 0.420359723269939, 0.0311373246368021, 0.837275934638456, 0.935733502730727, 0.121848635142669, 0.725517081329599, 0.817749575478956, 0.0884285906795412, 0.772009355714545, 0.98868469055742, 0.60391039121896, 0.59145148168318, 0.322810134850442, 0.161894524469972, 0.412108243210241, 0.580692415125668, 0.393189013469964, 0.272724225884303, 0.581202099798247, 0.326567733893171, 0.442687313538045, 0.722920250147581, 0.109244641615078, 0.187062332639471, 0.229863188927993, 0.958640562137589, 0.932846011826769, 0.904178362339735, 0.72842194722034, 0.481362970545888, 0.972416104748845, 0.63097850442864, 0.233852020697668, 0.451415721559897, 0.346038994379342, 0.983041361439973, 0.540004353970289, 0.434511355357245, 0.289465277688578, 0.737348537659273, 0.298832940403372, 0.527145440690219, 0.810640024254099, 0.355325613170862, 0.403277300531045, 0.656182921258733, 0.97877454967238, 0.636039654491469, 0.473133144667372, 0.366914543323219, 0.43837555940263, 0.382701793918386, 0.0791332046501338, 0.0381310693919659, 0.695368988439441, 0.929054118227214, 0.520997469546273, 0.195692773209885, 0.163051356794313, 0.536834177561104, 0.885647653369233, 0.216308050788939, 0.645981996785849, 0.111501617357135, 0.760185932042077, 0.366533265449107, 0.0241409183945507, 0.724542989395559, 0.438393475487828, 0.330162542173639, 0.531181201338768, 0.662543034879491, 0.226930265547708, 0.642283296445385, 0.604369689710438, 0.842149984324351, 0.325626821490005, 0.618845290271565, 0.805244568735361, 0.316980341915041, 0.928328194655478, 0.0478690611198545, 0.776912773260847, 0.824222379829735, 0.428637109231204, 0.871842102147639, 0.513129592873156, 0.0168301216326654, 0.949277862906456, 0.470846388256177, 0.0147891016677022, 0.410611979430541, 0.136599567020312, 0.717579355696216, 0.0959183019585907, 0.41610343195498, 0.224454239709303, 0.242189258569852, 0.535326782381162, 0.72441074391827, 0.763126281090081, 0.941649231128395, 0.844466031529009, 0.174981266260147, 0.378155727637932, 0.945117542985827, 0.870805972954258, 0.542101653758436, 0.0610314020887017, 0.421871059341356, 0.0556987866293639, 0.843436605995521, 0.462171474006027, 0.474003300769255, 0.570751049555838, 0.598857532721013, 0.41430277749896, 0.417658092454076, 0.364519549999386, 0.410006472840905, 0.296104430221021, 0.115342336241156, 0.31589946616441, 0.57667253119871, 0.904409199487418, 0.688561047660187, 0.943861127365381, 0.548445267369971, 0.56722366833128, 0.0719307458493859, 0.511115243425593, 0.935113871935755, 0.192399821942672, 0.646908384747803, 0.939669742714614, 0.164586388505995, 0.924146447563544, 0.804076276021078, 0.971673431340605, 0.116684435168281, 0.379221954382956, 0.707784378901124, 0.377448746003211, 0.39585690991953, 0.148493953282014, 0.118944415589795, 0.0552417852450162, 0.826715446077287, 0.690356394508854, 0.0873276486527175, 0.758638835512102, 0.449155099224299, 0.630357339512557, 0.457484635990113, 0.559365197550505, 0.26571821118705, 0.674902765080333, 0.996405100217089, 0.894397330004722, 0.797759741544724, 0.893250775989145, 0.703406498767436, 0.832150779664516, 0.52495187567547, 0.706748996162787, 0.689196224790066, 0.0134906766470522, 0.965205734595656, 0.451754416339099, 0.861104835756123, 0.595824313117191, 0.633225591154769, 0.421438542194664, 0.925330952042714, 0.293169638607651, 0.585435556015, 0.934515132801607, 0.467315612360835, 0.631097837584093, 0.836852243868634, 0.106533990707248, 0.0687672710046172, 0.788571833400056, 0.82484318385832, 0.631496706744656, 0.814802437089384, 0.798940513283014, 0.336349444463849, 0.0721336579881608, 0.588382553542033, 0.261595700168982, 0.656837886897847, 0.0336782762315124, 0.67919581476599, 0.0657331480178982, 0.154904911760241, 0.270167955430225, 0.944267804501578, 0.182763936230913, 0.759950399864465, 0.820972286164761, 0.684155934024602, 0.613287881715223, 0.745721789076924, 0.433429111959413, 0.741279761539772, 0.282426831079647, 0.762558755464852, 0.714837568346411, 0.986255209892988, 0.085601391736418, 0.693138906499371, 0.105050839018077, 0.949451594846323, 0.331166384276003, 0.973167447606102, 0.195265810005367, 0.185742074623704, 0.0179874992463738, 0.046621385961771, 0.573199597653002, 0.791138257598504, 0.992275927215815, 0.0464200272690505, 0.39383157948032, 0.718675158685073, 0.882429631659761, 0.348229649243876, 0.550410815514624, 0.368690375937149, 0.286853636149317, 0.926328326808289, 0.234886044636369, 0.345297025283799, 0.499725848203525, 0.267312719486654, 0.875644164392725, 0.323167786700651, 0.856321799801663, 0.895989687880501, 0.124620833666995, 0.237644577864558, 0.148717550328001, 0.589855725876987, 0.136455006897449, 0.966107381740585, 0.74366162950173, 0.276140007190406, 0.631170053500682, 0.101554665481672, 0.573764922097325, 0.515440116869286, 0.0671924941707402, 0.358284641755745, 0.0801977657247335, 0.340487922308967, 0.568993126275018, 0.0091027575545013, 0.0208611490670592, 0.643488629488274, 0.0759835646022111, 0.586615010397509, 0.973850990179926, 0.22090830327943, 0.941867272835225, 0.681158617604524, 0.356399297248572, 0.805515125859529, 0.446953258942813, 0.878330497071147, 0.00227456400170922, 0.378369328565896, 0.741754690650851, 0.209406530950218, 0.363369001075625, 0.403584430459887, 0.877736762631685, 0.566790008218959, 0.935844680294394, 0.219160298584029, 0.26246434240602, 0.36508425604552, 0.29530803184025, 0.253437964478508, 0.978713609511033, 0.920588723383844, 0.457758071599528, 0.7912345782388, 0.324958260171115, 0.401884680846706, 0.526107210433111, 0.488445741124451, 0.686783353099599, 0.775479659903795, 0.850628256332129, 0.575355070643127, 0.593451937660575, 0.320420960430056, 0.450247769476846, 0.745771642774343, 0.936102248262614, 0.64405518816784, 0.912535817828029, 0.251566974213347, 0.762253938242793, 0.858741886215284, 0.580789889674634, 0.834842026466504, 0.788330224109814, 0.126900386530906, 0.125410983571783, 0.649786776630208, 0.334142670501024, 0.034051023889333, 0.974931447533891, 0.993325363844633, 0.0633643618784845, 0.42498330399394, 0.156415965873748, 0.960946430452168, 0.128727624891326, 0.292738527059555, 0.598870879970491, 0.729532529832795, 0.791072049643844, 0.541490063769743, 0.942412163829431, 0.290868705837056, 0.0874406527727842, 0.603181090205908, 0.890801482368261, 0.273318256950006, 0.660076154628769, 0.853557865368202, 0.1756353052333, 0.765585104236379, 0.0873005078174174, 0.983643038198352, 0.365389324491844, 0.860834662569687, 0.663329585222527, 0.236074453918263, 0.0125471316277981, 0.802857550093904, 0.0916366991586983, 0.0501704132184386, 0.671097436919808, 0.404474087059498, 0.0652065947651863, 0.981625792104751, 0.922203497262672, 0.889435598626733, 0.731995566282421, 0.642594656441361, 0.928641718113795, 0.239715109346434, 0.809033464407548, 0.466784595046192, 0.439976963214576, 0.198280860902742, 0.488043377641588, 0.508710659574717, 0.470696929842234, 0.306387801887468, 0.445662614190951, 0.621480894042179, 0.526031861780211, 0.335855711717159, 0.122536561917514, 0.788715076632798, 0.359824985964224, 0.742688235128298, 0.493967207847163, 0.246627776185051, 0.590770477661863, 0.757979395100847, 0.594309086212888, 0.326687507331371, 0.244741340633482, 0.258170170942321, 0.990872008958831, 0.299911226145923, 0.859522312413901, 0.653392655076459, 0.735741003183648, 0.524827021174133, 0.911371380090714, 0.642643311060965, 0.477159743662924, 0.790969991125166, 0.32961358060129, 0.769570637959987, 0.25000092596747, 0.387907552300021, 0.0272494778037071, 0.481942160055041, 0.771474597044289, 0.866635535378009, 0.0475039056036621, 0.33453546767123, 0.912513487040997, 0.141893497901037, 0.848099175374955, 0.108371625421569, 0.898270717123523, 0.993494633352384, 0.731632373295724, 0.587014223681763, 0.59901143447496, 0.52687302348204, 0.359607056947425, 0.109100585337728, 0.741471673129126, 0.869926182087511, 0.463477763347328, 0.675844046985731, 0.727222190704197, 0.303794594947249, 0.325531880836934, 0.439881105907261, 0.285558727802709, 0.983631833922118, 0.880081447772682, 0.690188082866371, 0.575615097070113, 0.370132470969111, 0.445243182824925, 0.299011980183423, 0.0760456072166562, 0.633165488718078, 0.0479786347132176, 0.199625268578529, 0.560814850963652, 0.213769435882568, 0.479058128083125, 0.856457968708128, 0.937080160947517, 0.595964434789494, 0.920202999841422, 0.0708117573522031, 0.934014387661591, 0.269284777343273, 0.317349254852161, 0.666825661668554, 0.118290859507397, 0.820357826305553, 0.0372440840583295, 0.581408711150289, 0.224779046839103, 0.363838983001187, 0.900461491663009, 0.905250840354711, 0.830414762021974, 0.711765639251098, 0.830856990301982, 0.13080556737259, 0.938214367022738, 0.0733164753764868, 0.375166427344084, 0.793574845883995, 0.77666381932795, 0.923892400227487, 0.217584648169577, 0.496804614784196, 0.05225022835657, 0.452711296966299, 0.849397389683872, 0.267918856348842, 0.310821182793006, 0.197043646592647, 0.558396730804816, 0.356820586370304, 0.263081495184451, 0.241258634719998, 0.0296710964757949, 0.879974480951205, 0.444740823237225, 0.274489559000358, 0.85275203967467, 0.907600230537355, 0.363783224718645, 0.16846955451183, 0.802993277553469, 0.782580443192273, 0.994730409234762, 0.958000878803432, 0.0803567366674542, 0.780735280597582, 0.769712596898898, 0.563885802868754, 0.80432785442099, 0.117630788125098, 0.507577535696328, 0.297383261611685, 0.385434898082167, 0.83496742323041, 0.810704348841682, 0.41382146673277, 0.700916168978438, 0.075678980210796, 0.782588096568361, 0.841897988691926, 0.478184390813112, 0.659139941213652, 0.878529048990458, 0.824949085945264, 0.9096921288874, 0.897643693257123, 0.436136201955378, 0.678349884459749, 0.596270041773096, 0.823263114783913, 0.63858682080172, 0.6866519106552, 0.248039421159774, 0.461378342704847, 0.172699273563921, 0.80687544005923, 0.821713672019541, 0.431688542943448, 0.704783407505602, 0.14711165940389, 0.920175789156929, 0.77507783100009, 0.186111117713153, 0.837837515166029, 0.821898907423019, 0.884251966606826, 0.756061480613425, 0.798658423125744, 0.790842669084668, 0.753202112391591, 0.693713550223038, 0.365908444626257, 0.059024894842878, 0.867175317369401, 0.136798795778304, 0.471557356417179, 0.914563625352457, 0.807431635912508, 0.0885679062921554, 0.458429991733283, 0.813879621215165, 0.0534863730426878, 0.697425266960636, 0.472885468276218, 0.272258399520069, 0.055997067829594, 0.63335336977616, 0.649715093430132, 0.844476487720385, 0.338583477772772, 0.84427582169883, 0.978093089535832, 0.0413196857552975, 0.929390216944739, 0.302938035223633, 0.560979950241745, 0.0497311444487423, 0.461758570978418, 0.619287830544636, 0.3542331433855, 0.690546571277082, 0.863241259474307, 0.0111116315238178, 0.150179940043017, 0.695183650590479, 0.52978052594699, 0.323385541327298, 0.297625398496166, 0.515683444682509, 0.621841687476262, 0.516172987874597, 0.304769941838458, 0.571984197711572, 0.588802149752155, 0.958997451234609, 0.139402735978365, 0.829785575391725, 0.916990639874712, 0.223894926952198, 0.549964118050411, 0.839980867691338, 0.682066956534982, 0.436987952096388, 0.872027172474191, 0.728665946982801, 0.0568205898161978, 0.849667041329667, 0.296077814884484, 0.131770985899493, 0.168109802296385, 0.957685756264254, 0.0184068134985864, 0.979798312764615, 0.371807758929208, 0.126597719499841, 0.254927753936499, 0.996995914261788, 0.636374050052837, 0.481106608174741, 0.624335273401812, 0.409019866259769, 0.236418717773631, 0.14207182591781, 0.745683202054352, 0.0858743828721344, 0.222951284609735, 0.651342512341216, 0.669069015420973, 0.313132552895695, 0.409934650408104, 0.966760700335726, 0.825969280907884, 0.543363362317905, 0.316735942382365, 0.764518548734486, 0.227820308180526, 0.654666398884729, 0.656157416757196, 0.483536010608077, 0.552405228838325, 0.834569316590205, 0.870153984054923, 0.498082651989534, 0.142987502040341, 0.984469121322036, 0.606517560314387, 0.228386329254135, 0.188256488647312, 0.49982429575175, 0.292373939650133, 0.672713159117848, 0.356672884197906, 0.264711201423779, 0.0141347912140191, 0.519459653645754, 0.205479891737923, 0.433218437014148, 0.799027094617486, 0.715270636836067, 0.321827216073871, 0.420312832808122, 0.909594703000039, 0.895763223292306, 0.167533698724583, 0.479793067788705, 0.305852328427136, 0.317577425390482, 0.0191413897555321, 0.37833901681006, 0.127587543567643, 0.428548757918179, 0.15069695096463, 0.899783137254417, 0.80625585000962, 0.775442197453231, 0.240955455694348, 0.551779108820483, 0.671633162302896, 0.320160661591217, 0.743573885876685, 0.149952163919806, 0.345029686577618), actual = c(1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1), nmb = c(TP = -3, TN = 0, FP = -1, FN = -4)): could not find function \"fx_roc01\"  # get a combination of cutpoints from both user-defined functions and # inbuilt methods get_thresholds(   predicted = runif(1000),   actual = sample(c(0, 1), size = 1000, replace = TRUE),   cutpoint_methods = c(     \"fx_roc01\",     \"fx_sum_sens_spec\",     \"youden\",     \"all\",     \"none\"   ),   nmb = c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4) ) #> Error in fx_roc01(predicted = c(0.288672046037391, 0.609547753818333, 0.474952878430486, 0.187118313042447, 0.126475669909269, 0.75246148230508, 0.499469841597602, 0.455146247288212, 0.771954091265798, 0.201398276956752, 0.374409331707284, 0.164336453191936, 0.0441105321515352, 0.949844048591331, 0.618515112204477, 0.777211987879127, 0.910197786288336, 0.410564164863899, 0.178604040760547, 0.499989313073456, 0.365648301085457, 0.988115838728845, 0.906206078128889, 0.0955770085565746, 0.110077050980181, 0.218104850267991, 0.880363957723603, 0.112536678789183, 0.202353907283396, 0.821595364250243, 0.308591921348125, 0.465287459781393, 0.119804877787828, 0.969568240689114, 0.158018844434991, 0.974254766479135, 0.254548714263365, 0.517715095542371, 0.999733319506049, 0.788747578393668, 0.16762686567381, 0.57835912075825, 0.412304722471163, 0.539400813635439, 0.293147507822141, 0.781296802684665, 0.373010490089655, 0.0608345789369196, 0.907592191593722, 0.147103546420112, 0.257206964539364, 0.779142022365704, 0.556902572279796, 0.588842008728534, 0.397968584205955, 0.291925339959562, 0.15671441424638, 0.627586330287158, 0.204460729379207, 0.420145102543756, 0.50018198764883, 0.136918375268579, 0.644535623956472, 0.534984794445336, 0.436617800267413, 0.37174992938526, 0.772925755009055, 0.520813252078369, 0.745908222394064, 0.0470569406170398, 0.132114813895896, 0.486394764622673, 0.551071137888357, 0.432949155103415, 0.0129863808397204, 0.963541375705972, 0.300930102122948, 0.151468449272215, 0.228084095055237, 0.803082134807482, 0.859551468165591, 0.802220262121409, 0.551314946496859, 0.787869861815125, 0.538434657035396, 0.845421381760389, 0.0137919257394969, 0.045536955120042, 0.233119679614902, 0.999634859384969, 0.643241694197059, 0.890157289337367, 0.380512515082955, 0.890075615374371, 0.865738662658259, 0.520949053578079, 0.160357888555154, 0.0431747827678919, 0.850198338041082, 0.151003933744505, 0.869240431813523, 0.0721151120960712, 0.955410819966346, 0.658618696033955, 0.92631059139967, 0.965562989935279, 0.557431874796748, 0.679648638004437, 0.73905253270641, 0.623150302562863, 0.446770965354517, 0.567956340499222, 0.970400708494708, 0.63587318896316, 0.828369892667979, 0.85649056523107, 0.923012226587161, 0.482352452585474, 0.933351002866402, 0.77579007204622, 0.932987102307379, 0.680931849405169, 0.957918068859726, 0.806490811752155, 0.428104761056602, 0.124778220895678, 0.805866922950372, 0.725309177068993, 0.753654958447441, 0.941412706160918, 0.348100391915068, 0.870809719664976, 0.606590232113376, 0.411183029180393, 0.440160979982466, 0.449875072110444, 0.403746761381626, 0.685820516664535, 0.959374583559111, 0.06745894276537, 0.696457368787378, 0.00682796048931777, 0.741918532410637, 0.821395672624931, 0.62964259297587, 0.166744920192286, 0.861332118278369, 0.996698089176789, 0.278049263870344, 0.351425173925236, 0.751491389470175, 0.496187685523182, 0.10446633794345, 0.936591831268743, 0.532993570668623, 0.515641635749489, 0.412923817755654, 0.656940159620717, 0.027182292426005, 0.361828627996147, 0.524938252056018, 0.18063179217279, 0.338268315419555, 0.433762618573382, 0.0596921439282596, 0.494740211637691, 0.496659602969885, 0.0142225592862815, 0.338251363951713, 0.141618302557617, 0.311110266018659, 0.126933998661116, 0.919022399000823, 0.0834187832660973, 0.647695004474372, 0.834482194622979, 0.0298767844215035, 0.553070642752573, 0.0174442576244473, 0.76873381040059, 0.234009012347087, 0.620495338691399, 0.8431169425603, 0.16051481012255, 0.153473445447162, 0.0753705005627126, 0.183903183788061, 0.405653796857223, 0.51218462199904, 0.378483967855573, 0.509840453742072, 0.626249783672392, 0.939846991794184, 0.427234638715163, 0.880217906087637, 0.796777887968346, 0.695313927251846, 0.838497311808169, 3.15543729811907e-05, 0.952098784502596, 0.390688009327278, 0.741076951147988, 0.798623085021973, 0.0277238497510552, 0.224898373242468, 0.571031432598829, 0.291749530937523, 0.730815367307514, 0.917020561406389, 0.3445414674934, 0.822911723749712, 0.336089116986841, 0.867848057532683, 0.632226079702377, 0.0308307916857302, 0.304188115987927, 0.312189847230911, 0.653146213619038, 0.0444582160562277, 0.967520905192941, 0.452981127193198, 0.363811010029167, 0.0205564075149596, 0.420811640098691, 0.706399908987805, 0.177377012325451, 0.324843335198238, 0.545016451971605, 0.41843714681454, 0.370285712415352, 0.488030249951407, 0.679128329269588, 0.287049143109471, 0.491595251718536, 0.225990645121783, 0.523448170628399, 0.811609318479896, 0.950517721474171, 0.457353364443406, 0.397452017758042, 0.412887796992436, 0.558794486103579, 0.764798204181716, 0.200993360951543, 0.272283371537924, 0.383748397929594, 0.13450360763818, 0.672254497883841, 0.241366229718551, 0.836807440500706, 0.606480393093079, 0.279908134834841, 0.978109748568386, 0.364219812676311, 0.235903320368379, 0.715796186588705, 0.195904097286984, 0.764516555238515, 0.6883492723573, 0.167570693185553, 0.329651727108285, 0.768617710098624, 0.766119995620102, 0.797769654542208, 0.853897526860237, 0.627786578377709, 0.675642019836232, 0.481791733531281, 0.0260848961770535, 0.64377604983747, 0.333907028660178, 0.0205819967668504, 0.918816373217851, 0.787379392655566, 0.0654831775464118, 0.434315847000107, 0.117181428009644, 0.499925407348201, 0.750850585289299, 0.148834793595597, 0.688949241302907, 0.825928554637358, 0.0588358070235699, 0.990555334836245, 0.552204198902473, 0.890594588359818, 0.551306349691004, 0.441045669373125, 0.455847115488723, 0.397644844371825, 0.26298137428239, 0.842796976910904, 0.570647589629516, 0.290057932958007, 0.513673142297193, 0.709277375601232, 0.825049498351291, 0.966393792303279, 0.851370227523148, 0.524075454100966, 0.138733085244894, 0.173242300748825, 0.960900660837069, 0.612398461904377, 0.999352609273046, 0.806246590800583, 0.744941843906417, 0.644535777159035, 0.311136743985116, 0.80390004790388, 0.771329570095986, 0.554878968978301, 0.584646547678858, 0.0747298269998282, 0.957939594518393, 0.254857301246375, 0.958538462407887, 0.392714133951813, 0.674656199524179, 0.145822487073019, 0.788728483021259, 0.994740335503593, 0.775354372570291, 0.0920652346685529, 0.400441920850426, 0.33379067806527, 0.352029806701466, 0.165826958836988, 0.368542744312435, 0.644718988798559, 0.331060033524409, 0.386863311519846, 0.543812938500196, 0.202898306306452, 0.701192709850147, 0.757867257110775, 0.460609716596082, 0.100593026960269, 0.381090880837291, 0.0368639517109841, 0.859312189975753, 0.666799552738667, 0.92315890872851, 0.705315420404077, 0.00668121525086462, 0.719711378449574, 0.852246813243255, 0.858767934609205, 0.207458524266258, 0.69823517720215, 0.642903217347339, 0.719357000198215, 0.0532143986783922, 0.33936205226928, 0.483716578921303, 0.22923124092631, 0.62146716681309, 0.869758953573182, 0.332496209535748, 0.44956370908767, 0.521264655981213, 0.399499436141923, 0.486521012382582, 0.091734457295388, 0.609585318248719, 0.152938708895817, 0.657119499985129, 0.232513352297246, 0.567627718672156, 0.328578830230981, 0.980049168225378, 0.680924214888364, 0.720526431687176, 0.595521511510015, 0.153269356815144, 0.54178066062741, 0.980476032709703, 0.353898852830753, 0.705758490832523, 0.901660317089409, 0.71805799077265, 0.0923644346185029, 0.671934822807088, 0.754844185197726, 0.774804407265037, 0.232455944176763, 0.991428897948936, 0.828045776346698, 0.73213171842508, 0.819494206691161, 0.655011035501957, 0.0763081631157547, 0.289828915148973, 0.618068045703694, 0.323676663916558, 0.274310763459653, 0.342679721536115, 0.811449151253328, 0.183191258925945, 0.261748980963603, 0.426659226883203, 0.204078986542299, 0.528164679650217, 0.883318996522576, 0.44122930127196, 0.180056691169739, 0.0343301668763161, 0.28851567953825, 0.849092285847291, 0.231452729785815, 0.0730299893766642, 0.672156166750938, 0.420295997522771, 0.0745622864924371, 0.44187508802861, 0.92647083173506, 0.19736102106981, 0.773923161206767, 0.791327924234793, 0.786596766673028, 0.605682250112295, 0.264810691587627, 0.714677644893527, 0.845108228269964, 0.71792146936059, 0.0475449494551867, 0.305980534991249, 0.497418301180005, 0.90641048992984, 0.91264866781421, 0.109003040939569, 0.325152842095122, 0.214046239620075, 0.779539240989834, 0.837727589532733, 0.814399064984173, 0.543526437366381, 0.728971989359707, 0.960316340904683, 0.55091923289001, 0.527630096301436, 0.694375879596919, 0.390800254652277, 0.265059751458466, 0.951622199034318, 0.167037479812279, 0.422667789272964, 0.289087879704311, 0.150785389821976, 0.796690814429894, 0.300794619368389, 0.769036069046706, 0.933546081185341, 0.152971859322861, 0.211326012155041, 0.562842920655385, 0.554832047084346, 0.775248078163713, 0.567367187468335, 0.236608488950878, 0.262104963418096, 0.332255476620048, 0.770631110528484, 0.0167142227292061, 0.454017032170668, 0.333006314234808, 0.0651120552793145, 0.81527853035368, 0.797829939750955, 0.0121358844917268, 0.278283037710935, 0.105375824263319, 0.0699364382307976, 0.456141714472324, 0.947107729734853, 0.217676651431248, 0.283716331701726, 0.0966919446364045, 0.273099252488464, 0.975114512024447, 0.424169785343111, 0.657107093837112, 0.393248067237437, 0.683546993182972, 0.983456783927977, 0.547223079251125, 0.0763642280362546, 0.841479416238144, 0.35134543874301, 0.654053007485345, 0.814385121921077, 0.813556752633303, 0.550441521219909, 0.809890604810789, 0.217041681520641, 0.621737067587674, 0.170809802832082, 0.319153576390818, 0.817318038549274, 0.170918711926788, 0.604741213377565, 0.681507378816605, 0.120139034697786, 0.112487118225545, 0.519961450947449, 0.735976809402928, 0.824920061044395, 0.625938144978136, 0.947143178200349, 0.924987057689577, 0.88421846437268, 0.0243250962812454, 0.38277224986814, 0.801590465242043, 0.984139746753499, 0.733213265892118, 0.435486654052511, 0.283281397772953, 0.794798827264458, 0.521982279373333, 0.757109500467777, 0.971239754697308, 0.236374355619773, 0.681198694044724, 0.879369674017653, 0.0757511775009334, 0.0794015326537192, 0.661238461267203, 0.877292919438332, 0.319484220584854, 0.50441670184955, 0.140703666489571, 0.212596192024648, 0.0692600677721202, 0.242066992679611, 0.835325523978099, 0.19761555059813, 0.856870500138029, 0.804907120997086, 0.0417972141876817, 0.658646983327344, 0.23942109849304, 0.303627924062312, 0.0314135672524571, 0.10786398104392, 0.710581994149834, 0.236327416496351, 0.117434179876, 0.474200350232422, 0.486927886027843, 0.822653343435377, 0.0559240754228085, 0.239883778383955, 0.450608051149175, 0.853763320483267, 0.222390794893727, 0.575278025818989, 0.169249043567106, 0.126243285601959, 0.728210597997531, 0.214031089330092, 0.315510825254023, 0.231595720630139, 0.0109845623373985, 0.360241482732818, 0.686283425660804, 0.00517175905406475, 0.0999656901694834, 0.238161555491388, 0.324029410490766, 0.0163808106444776, 0.993224684847519, 0.439711135579273, 0.424327796557918, 0.270050070481375, 0.174847099231556, 0.845561889233068, 0.127253769896924, 0.257638669805601, 0.789313810411841, 0.299134061904624, 0.248516383115202, 0.624789950205013, 0.0979113278444856, 0.754342312924564, 0.603293729946017, 0.651106429751962, 0.76419164147228, 0.214824137510732, 0.284348451765254, 0.321635590866208, 0.538783329771832, 0.424523031339049, 0.852442925097421, 0.00788659113459289, 0.755818698788062, 0.474145228974521, 0.817049578530714, 0.489926365204155, 0.39579025353305, 0.693075362592936, 0.173110155388713, 0.14047825243324, 0.251275587594137, 0.556968048214912, 0.546988545916975, 0.00749610061757267, 0.329930779756978, 0.715267477557063, 0.225739559391513, 0.248299200320616, 0.778835089178756, 0.528506046161056, 0.694145670160651, 0.949129382614046, 0.381312502548099, 0.862294339342043, 0.155484463786706, 0.263956732815132, 0.744530862895772, 0.52396513428539, 0.318010473623872, 0.964293305529281, 0.362635251134634, 0.200743776280433, 0.732750771567225, 0.661053832154721, 0.413214454893023, 0.68588223378174, 0.583672969136387, 0.46887704427354, 0.544794668676332, 0.715276271570474, 0.855927941156551, 0.331405279692262, 0.48861985700205, 0.168623917968944, 0.729667075909674, 0.111692651640624, 0.0492683320771903, 0.83733719214797, 0.735723028425127, 0.726852292427793, 0.417535175103694, 0.936933071119711, 0.969159174943343, 0.894535318715498, 0.50415526330471, 0.220643202774227, 0.638199872337282, 0.836624626535922, 0.601994769414887, 0.187954401131719, 0.254479118622839, 0.730194560717791, 0.115249785594642, 0.118135428754613, 0.802542470162734, 0.0168564980849624, 0.493705367669463, 0.0449910664465278, 0.0388150080107152, 0.246383242076263, 0.364323892863467, 0.0543909594416618, 0.203755457187071, 0.643867073114961, 0.816868915455416, 0.469962232047692, 0.930931058013812, 0.449065722990781, 0.515814833110198, 0.569568984676152, 0.629703423241153, 0.641170971561223, 0.529527129139751, 0.848327281186357, 0.69141777115874, 0.485783634474501, 0.839959634235129, 0.0435309887398034, 0.122749004513025, 0.833179829176515, 0.236875440226868, 0.33602232253179, 0.616802363656461, 0.112431960180402, 0.208122099516913, 0.651759509230033, 0.0132817786652595, 0.00193649413995445, 0.229759356705472, 0.878376118373126, 0.0702517202589661, 0.100177963729948, 0.984301693737507, 0.93413644656539, 0.369790378026664, 0.415382395731285, 0.624395442428067, 0.420139693422243, 0.618648509029299, 0.575476514641196, 0.618729445151985, 0.311854765983298, 0.49782465887256, 0.43608414218761, 0.504482971038669, 0.514393319841474, 0.578750376123935, 0.717778657563031, 0.58339353906922, 0.840549144195393, 0.592326707439497, 0.831954507622868, 0.291817020624876, 0.825146902352571, 0.458354125265032, 0.905112128471956, 0.528626081766561, 0.719570933142677, 0.5057213595137, 0.520158666884527, 0.942126049892977, 0.297335233772174, 0.383484842255712, 0.747283668722957, 0.370533771812916, 0.450173890916631, 0.323120203800499, 0.388337699929252, 0.741326642921194, 0.708978596841916, 0.95276084728539, 0.471659488976002, 0.421174445888028, 0.937668211990967, 0.95364916161634, 0.186856114305556, 0.234328748658299, 0.802734104916453, 0.307246886193752, 0.885484502883628, 0.486029573716223, 0.101981776533648, 0.864986335393041, 0.336271231528372, 0.702397487126291, 0.90317733050324, 0.937948260223493, 0.293551016831771, 0.612404860323295, 0.771354756085202, 0.126170783303678, 0.0808697319589555, 0.0987638672813773, 0.393085198942572, 0.899762979708612, 0.660811141366139, 0.899263862753287, 0.687721757218242, 0.0622144211083651, 0.942441288847476, 0.58679363084957, 0.209115961566567, 0.905128659447655, 0.884329279651865, 0.686183434678242, 0.100175073137507, 0.259886004962027, 0.123390372376889, 0.875478104688227, 0.484508727444336, 0.624568838858977, 0.415115792769939, 0.983841472538188, 0.368839718867093, 0.0679530366323888, 0.75423658429645, 0.875889231916517, 0.0222083069384098, 0.243503785226494, 0.222933486802503, 0.628021413227543, 0.000648280140012503, 0.728034692816436, 0.93208877579309, 0.27388962963596, 0.87366084381938, 0.435219895793125, 0.278594764415175, 0.541845411760733, 0.589366164989769, 0.747150082373992, 0.807977818418294, 0.10901104635559, 0.872230387292802, 0.935261500766501, 0.0136280287988484, 0.647992430487648, 0.228768256958574, 0.00812107999809086, 0.39282057271339, 0.500092193949968, 0.620799232507125, 0.659359346842393, 0.746757966466248, 0.434628293383867, 0.525589522439986, 0.948621685151011, 0.810472829267383, 0.0908319717273116, 0.486736309481785, 0.207810162799433, 0.828420363599434, 0.179414576850832, 0.943688567960635, 0.0817725630477071, 0.953618190251291, 0.17364590568468, 0.466260899556801, 0.57829822297208, 0.507949190447107, 0.487233719788492, 0.880706006661057, 0.85303070791997, 0.881300404900685, 0.915683159604669, 0.0335852557327598, 0.189386722398922, 0.818563815206289, 0.345678966259584, 0.848988557234406, 0.43317946465686, 0.846959206974134, 0.767210439546034, 0.464454092085361, 0.0432538464665413, 0.764172723982483, 0.0639578627888113, 0.197125301230699, 0.401480379514396, 0.66166540235281, 0.586088322568685, 0.656530083622783, 0.374835940776393, 0.725066291401163, 0.861707830103114, 0.060436692321673, 0.75849514757283, 0.584404382156208, 0.102394533809274, 0.371432211482897, 0.471944539807737, 0.784203053684905, 0.279898879118264, 0.829984415322542, 0.495615621097386, 0.143329601269215, 0.128034390509129, 0.0491324462927878, 0.000430401647463441, 0.784593344200402, 0.819576353533193, 0.981535211903974, 0.735825531184673, 0.580266927368939, 0.160662884125486, 0.534217350883409, 0.730324884643778, 0.359233506256714, 0.924421312753111, 0.467309304978698, 0.165990304900333, 0.528146723983809, 0.978980932850391, 0.336385626578704, 0.331691256957129, 0.0565079981461167, 0.0302864331752062, 0.201579497428611, 0.911587298382074, 0.867635199101642, 0.251194780226797, 0.69923804490827, 0.233370242873207, 0.73921018303372, 0.664773257216439, 0.458447217708454, 0.295208568684757, 0.355656273663044, 0.101503255078569, 0.638736251508817, 0.654575594700873, 0.571800816338509, 0.741003934293985, 0.469581589335576, 0.734123796224594, 0.744618338532746, 0.393919202266261, 0.391921280650422, 0.552829203894362, 0.0435662907548249, 0.765331234084442, 0.118900690460578, 0.962183777242899, 0.573858251329511, 0.957238385919482, 0.0901665729470551, 0.622029279358685, 0.208392708562315, 0.103416283614933, 0.492444083327428, 0.680261193076149, 0.109483285807073, 0.0768913852516562, 0.49336093920283, 0.241557449102402, 0.486910382751375, 0.21811000443995, 0.866426188964397, 0.00139094982296228, 0.709624438779429, 0.222648877417669, 0.542286744574085, 0.39606687030755, 0.548558779759333, 0.845719432458282, 0.971796041820198, 0.211295563960448, 0.993650231743231, 0.156714134849608, 0.381686360109597, 0.215935880551115, 0.712858526268974, 0.359051810344681, 0.661523318383843, 0.993717293255031, 0.322053624549881, 0.412168303737417, 0.103348455624655, 0.390786808915436, 0.205704031977803, 0.902463760925457, 0.957989339018241, 0.0816128142178059, 0.500358146615326, 0.229126111371443, 0.289446811657399, 0.281807305989787, 0.000781619688495994, 0.961720327846706, 0.448718758998439, 0.250364441424608, 0.0133466585539281, 0.821721193380654, 0.871134206419811, 0.942202169680968, 0.841420503566042, 0.903466620715335, 0.358030666131526, 0.208981062052771, 0.655637366231531, 0.233155855210498, 0.382216975325719, 0.594715574756265, 0.335277918260545, 0.164152905577794, 0.0620837430469692, 0.879175858804956, 0.225418789312243, 0.614467965438962, 0.422708865022287, 0.989364997018129, 0.455186122795567, 0.269085160689428, 0.0930443301331252, 0.645263262791559, 0.535458190832287, 0.741117013851181, 0.706820422085002, 0.152653867378831, 0.833124765893444, 0.101029675221071, 0.73592345090583, 0.7678864877671, 0.000940507976338267, 0.435743113746867, 0.526459725107998, 0.702286309329793, 0.130007655592635, 0.0451116650365293, 0.404344068840146, 0.988247122149915, 0.993464030092582, 0.309336706763133, 0.782065304694697, 0.654451178852469, 0.319079885957763, 0.558498656377196), actual = c(1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1), nmb = c(TP = -3, TN = 0, FP = -1, FN = -4)): could not find function \"fx_roc01\""},{"path":"https://rwparsons.github.io/predictNMB/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rwparsons.github.io/predictNMB/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/predictNMB-package.html","id":null,"dir":"Reference","previous_headings":"","what":"predictNMB: Evaluate Clinical Prediction Models by Net Monetary Benefit — predictNMB-package","title":"predictNMB: Evaluate Clinical Prediction Models by Net Monetary Benefit — predictNMB-package","text":"learn use predictNMB, see vignettes website using following code: browseVignettes(package = \"predictNMB\")","code":""},{"path":[]},{"path":"https://rwparsons.github.io/predictNMB/reference/predictNMB-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"predictNMB: Evaluate Clinical Prediction Models by Net Monetary Benefit — predictNMB-package","text":"Maintainer: Rex Parsons rex.parsons94@gmail.com (ORCID) Authors: Robin Blythe (ORCID) Adrian Barnett (ORCID) contributors: Emi Tanaka (Emi Tanaka reviewed predictNMB rOpenSci, see <https://github.com/ropensci/software-review/issues/566>.) [reviewer] Tinula Kariyawasam (Tinula Kariyawasam reviewed predictNMB rOpenSci, see <https://github.com/ropensci/software-review/issues/566>.) [reviewer] Susanna Cramb (ORCID) [contributor] Steven McPhail (ORCID) [contributor]","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary of a predictNMBscreen object — print.predictNMBscreen","title":"Print a summary of a predictNMBscreen object — print.predictNMBscreen","text":"Print summary predictNMBscreen object","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary of a predictNMBscreen object — print.predictNMBscreen","text":"","code":"# S3 method for predictNMBscreen print(x, ...)"},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary of a predictNMBscreen object — print.predictNMBscreen","text":"x predictNMBscreen object. ... Optional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary of a predictNMBscreen object — print.predictNMBscreen","text":"print(x) returns x invisibly.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary of a predictNMBscreen object — print.predictNMBscreen","text":"","code":"if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_screen_obj <- screen_simulation_inputs(     n_sims = 50, n_valid = 10000, sim_auc = seq(0.7, 0.9, 0.1),     event_rate = 0.1,     fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )   print(sim_screen_obj) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary of a predictNMBsim object — print.predictNMBsim","title":"Print a summary of a predictNMBsim object — print.predictNMBsim","text":"Print summary predictNMBsim object","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary of a predictNMBsim object — print.predictNMBsim","text":"","code":"# S3 method for predictNMBsim print(x, ...)"},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary of a predictNMBsim object — print.predictNMBsim","text":"x predictNMBsim object. ... Optional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary of a predictNMBsim object — print.predictNMBsim","text":"print(x) returns x invisibly.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/print.predictNMBsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary of a predictNMBsim object — print.predictNMBsim","text":"","code":"if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_obj <- do_nmb_sim(     sample_size = 200, n_sims = 50, n_valid = 10000, sim_auc = 0.7,     event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )   print(sim_obj) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/screen_simulation_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen many simulation inputs: a parent function to do_nmb_sim() — screen_simulation_inputs","title":"Screen many simulation inputs: a parent function to do_nmb_sim() — screen_simulation_inputs","text":"Runs do_nmb_sim() range inputs.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/screen_simulation_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen many simulation inputs: a parent function to do_nmb_sim() — screen_simulation_inputs","text":"","code":"screen_simulation_inputs(   sample_size,   n_sims,   n_valid,   sim_auc,   event_rate,   cutpoint_methods = get_inbuilt_cutpoint_methods(),   fx_nmb_training,   fx_nmb_evaluation,   pair_nmb_train_and_evaluation_functions = FALSE,   meet_min_events = TRUE,   min_events = NA,   show_progress = FALSE,   cl = NULL )"},{"path":"https://rwparsons.github.io/predictNMB/reference/screen_simulation_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen many simulation inputs: a parent function to do_nmb_sim() — screen_simulation_inputs","text":"sample_size value (vector values): Sample size training set. missing, sample size calculation performed calculated size used. n_sims value (vector values): Number simulations run. n_valid value (vector values): Sample size evaluation set. sim_auc value (vector values): Simulated model discrimination (AUC). event_rate value (vector values): simulated event rate binary outcome predicted. cutpoint_methods cutpoint methods include. Defaults use inbuilt methods. change across calls do_nmb_sim(). fx_nmb_training function (list functions) returns named vector NMB assigned classifications use obtaining cutpoint training set. fx_nmb_evaluation function (list functions) returns named vector NMB assigned classifications use obtaining cutpoint evaluation set. pair_nmb_train_and_evaluation_functions logical. Whether pair lists functions passed fx_nmb_training fx_nmb_evaluation. two treatment strategies used, may make sense pair selecting value-optimising cost-minimising threshold using one strategy evaluating another likely unwanted. meet_min_events Whether incrementally add samples expected number events (sample_size * event_rate) met. (Applies sampling training data .) min_events value: minimum number events include training sample. less number included sample size sample_size, additional samples added min_events met. default (NA) use expected value given event_rate sample_size. show_progress Logical. Whether display progress bar. cl cluster made using parallel::makeCluster(). cluster provided, simulation done parallel.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/screen_simulation_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen many simulation inputs: a parent function to do_nmb_sim() — screen_simulation_inputs","text":"Returns predictNMBscreen object.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/screen_simulation_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen many simulation inputs: a parent function to do_nmb_sim() — screen_simulation_inputs","text":"","code":"# Screen for optimal cutpoints given increasing values of # model discrimination (sim_auc) if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_screen_obj <- screen_simulation_inputs(     n_sims = 50, n_valid = 10000, sim_auc = seq(0.7, 0.9, 0.1),     event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   ) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","title":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","text":"Create table summaries predictNMBscreen objects.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","text":"","code":"# S3 method for predictNMBscreen summary(   object,   what = c(\"nmb\", \"inb\", \"cutpoints\"),   inb_ref_col = NULL,   agg_functions = list(median = function(x) {      round(stats::median(x), digits = 2)      }, `95% CI` = function(x) {      paste0(round(stats::quantile(x, probs = c(0.025,     0.975)), digits = 1), collapse = \" to \")  }),   rename_vector,   show_full_inputs = FALSE,   ... )"},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","text":"object predictNMBscreen object. summarise: one \"nmb\", \"inb\" \"cutpoints\". Defaults \"nmb\". inb_ref_col cutpoint method use reference strategy calculating incremental net monetary benefit. See do_nmb_sim information. agg_functions named list functions use aggregate selected values. Defaults median 95% interval. rename_vector named vector renaming methods summary. values vector default names names given desired names output. show_full_inputs logical. Whether include inputs used simulation alongside aggregations. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","text":"Returns tibble.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBscreen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","text":"Table summaries based argument. Using \"nmb\" returns simulated values NMB, reference group; \"inb\" returns difference simulated values NMB set strategy defined inb_ref_col; \"cutpoints\" returns cutpoints selected (0, 1).","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create table summaries of predictNMBscreen objects. — summary.predictNMBscreen","text":"","code":"# perform screen with increasing values of model discimination (sim_auc) if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_screen_obj <- screen_simulation_inputs(     n_sims = 50, n_valid = 10000, sim_auc = seq(0.7, 0.9, 0.1),     event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )   summary(sim_screen_obj) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","title":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","text":"Create table summaries predictNMBsim objects.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","text":"","code":"# S3 method for predictNMBsim summary(   object,   what = c(\"nmb\", \"inb\", \"cutpoints\"),   inb_ref_col = NULL,   agg_functions = list(median = function(x) {      round(stats::median(x), digits = 2)      }, `95% CI` = function(x) {      paste0(round(stats::quantile(x, probs = c(0.025,     0.975)), digits = 1), collapse = \" to \")  }),   rename_vector,   ... )"},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","text":"object predictNMBsim object. summarise: one \"nmb\", \"inb\" \"cutpoints\". Defaults \"nmb\". inb_ref_col cutpoint method use reference strategy calculating incremental net monetary benefit. See do_nmb_sim information. agg_functions named list functions use aggregate selected values. Defaults median 95% interval. rename_vector named vector renaming methods summary. values vector default names names given desired names output. ... Additional, ignored arguments.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","text":"Returns tibble.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","text":"Table summaries based argument. Using \"nmb\" returns simulated values NMB, reference group; \"inb\" returns difference simulated values NMB set strategy defined inb_ref_col; \"cutpoints\" returns cutpoints selected (0, 1).","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/summary.predictNMBsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create table summaries of predictNMBsim objects. — summary.predictNMBsim","text":"","code":"# perform simulation with do_nmb_sim() if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_obj <- do_nmb_sim(     sample_size = 200, n_sims = 50, n_valid = 10000, sim_auc = 0.7,     event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )   summary(sim_obj) }"},{"path":"https://rwparsons.github.io/predictNMB/reference/theme_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a ggplot2 theme that reduces clutter in an autoplot()\nof a predictNMBsim object. — theme_sim","title":"Returns a ggplot2 theme that reduces clutter in an autoplot()\nof a predictNMBsim object. — theme_sim","text":"Returns ggplot2 theme reduces clutter autoplot() predictNMBsim object.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/theme_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a ggplot2 theme that reduces clutter in an autoplot()\nof a predictNMBsim object. — theme_sim","text":"","code":"theme_sim()"},{"path":"https://rwparsons.github.io/predictNMB/reference/theme_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a ggplot2 theme that reduces clutter in an autoplot()\nof a predictNMBsim object. — theme_sim","text":"Returns ggplot2 theme.","code":""},{"path":"https://rwparsons.github.io/predictNMB/reference/theme_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a ggplot2 theme that reduces clutter in an autoplot()\nof a predictNMBsim object. — theme_sim","text":"","code":"if (FALSE) {   get_nmb <- function() c(\"TP\" = -3, \"TN\" = 0, \"FP\" = -1, \"FN\" = -4)   sim_obj <- do_nmb_sim(     sample_size = 200, n_sims = 50, n_valid = 10000, sim_auc = 0.7,     event_rate = 0.1, fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb   )    autoplot(sim_obj) + theme_sim() }"},{"path":"https://rwparsons.github.io/predictNMB/news/index.html","id":"predictnmb-development-version","dir":"Changelog","previous_headings":"","what":"predictNMB (development version)","title":"predictNMB (development version)","text":"Updates README, vignettes documentation clarity","code":""},{"path":"https://rwparsons.github.io/predictNMB/news/index.html","id":"predictnmb-001","dir":"Changelog","previous_headings":"","what":"predictNMB 0.0.1","title":"predictNMB 0.0.1","text":"First submitted version predictNMB rOpenSci Includes functions simulating evaluating clinical prediction models regarding estimated Net Monetary Benefit (NMB)","code":""}]
